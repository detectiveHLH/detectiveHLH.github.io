const e=JSON.parse('{"key":"v-dba82450","path":"/posts/230858.html","title":"用go-module作为包管理器搭建go的web服务器","lang":"zh-CN","frontmatter":{"date":"2019-06-10T00:00:00.000Z","permalink":"/posts/230858.html","category":["Golang"],"tag":["Golang"],"description":"用go-module作为包管理器搭建go的web服务器 本篇博客主要介绍了如何从零开始，使用Go Module作为依赖管理，基于Gin来一步一步搭建Go的Web服务器。并使用Endless来使服务器平滑重启，使用Swagger来自动生成Api文档。 源码在此处：项目源码 大家可以先查看源码，然后再根据本篇文章，来了解搭建过程中服务器的一些细节。","head":[["meta",{"property":"og:url","content":"https://leonsh.cn/posts/230858.html"}],["meta",{"property":"og:site_name","content":"SH的全栈笔记"}],["meta",{"property":"og:title","content":"用go-module作为包管理器搭建go的web服务器"}],["meta",{"property":"og:description","content":"用go-module作为包管理器搭建go的web服务器 本篇博客主要介绍了如何从零开始，使用Go Module作为依赖管理，基于Gin来一步一步搭建Go的Web服务器。并使用Endless来使服务器平滑重启，使用Swagger来自动生成Api文档。 源码在此处：项目源码 大家可以先查看源码，然后再根据本篇文章，来了解搭建过程中服务器的一些细节。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-08-25T12:38:04.000Z"}],["meta",{"property":"article:author","content":"LeonSH"}],["meta",{"property":"article:tag","content":"Golang"}],["meta",{"property":"article:published_time","content":"2019-06-10T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-08-25T12:38:04.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"用go-module作为包管理器搭建go的web服务器\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2019-06-10T00:00:00.000Z\\",\\"dateModified\\":\\"2023-08-25T12:38:04.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LeonSH\\",\\"url\\":\\"https://leonsh.cn\\"}]}"]]},"headers":[{"level":2,"title":"搭建环境","slug":"搭建环境","link":"#搭建环境","children":[{"level":3,"title":"安装go","slug":"安装go","link":"#安装go","children":[]},{"level":3,"title":"IDE","slug":"ide","link":"#ide","children":[]},{"level":3,"title":"配置GOPATH","slug":"配置gopath","link":"#配置gopath","children":[]},{"level":3,"title":"启用GO Module","slug":"启用go-module","link":"#启用go-module","children":[]}]},{"level":2,"title":"搭建项目框架","slug":"搭建项目框架","link":"#搭建项目框架","children":[{"level":3,"title":"新建目录","slug":"新建目录","link":"#新建目录","children":[]},{"level":3,"title":"初始化go module","slug":"初始化go-module","link":"#初始化go-module","children":[]},{"level":3,"title":"新建main.go","slug":"新建main-go","link":"#新建main-go","children":[]},{"level":3,"title":"运行main.go","slug":"运行main-go","link":"#运行main-go","children":[]}]},{"level":2,"title":"引入Gin","slug":"引入gin","link":"#引入gin","children":[{"level":3,"title":"安装Gin","slug":"安装gin","link":"#安装gin","children":[]},{"level":3,"title":"修改main.go","slug":"修改main-go","link":"#修改main-go","children":[]},{"level":3,"title":"启动服务器","slug":"启动服务器","link":"#启动服务器","children":[]}]},{"level":2,"title":"构建路由","slug":"构建路由","link":"#构建路由","children":[{"level":3,"title":"新建路由模块","slug":"新建路由模块","link":"#新建路由模块","children":[]},{"level":3,"title":"在main函数中引入路由","slug":"在main函数中引入路由","link":"#在main函数中引入路由","children":[]}]},{"level":2,"title":"引入JWT鉴权","slug":"引入jwt鉴权","link":"#引入jwt鉴权","children":[{"level":3,"title":"新建jwt鉴权文件","slug":"新建jwt鉴权文件","link":"#新建jwt鉴权文件","children":[]},{"level":3,"title":"引入常量","slug":"引入常量","link":"#引入常量","children":[]},{"level":3,"title":"实现登录接口","slug":"实现登录接口","link":"#实现登录接口","children":[]},{"level":3,"title":"修改router.go","slug":"修改router-go","link":"#修改router-go","children":[]},{"level":3,"title":"运行main.go","slug":"运行main-go-1","link":"#运行main-go-1","children":[]}]},{"level":2,"title":"引入swagger","slug":"引入swagger","link":"#引入swagger","children":[{"level":3,"title":"安装依赖","slug":"安装依赖","link":"#安装依赖","children":[]},{"level":3,"title":"在router中注入swagger","slug":"在router中注入swagger","link":"#在router中注入swagger","children":[]},{"level":3,"title":"为接口编写swagger注释","slug":"为接口编写swagger注释","link":"#为接口编写swagger注释","children":[]},{"level":3,"title":"初始化swagger","slug":"初始化swagger","link":"#初始化swagger","children":[]},{"level":3,"title":"查看swagger文档","slug":"查看swagger文档","link":"#查看swagger文档","children":[]}]},{"level":2,"title":"引入Endless","slug":"引入endless","link":"#引入endless","children":[{"level":3,"title":"安装Endless","slug":"安装endless","link":"#安装endless","children":[]},{"level":3,"title":"修改main.go","slug":"修改main-go-1","link":"#修改main-go-1","children":[]}]},{"level":2,"title":"写在后面","slug":"写在后面","link":"#写在后面","children":[]}],"git":{"createdTime":1692967084000,"updatedTime":1692967084000,"contributors":[{"name":"leonsh","email":"detectivehlh@qq.com","commits":1}]},"readingTime":{"minutes":14.23,"words":4269},"filePathRelative":"posts/Golang/用go-module作为包管理器搭建go的web服务器.md","localizedDate":"2019年6月10日","excerpt":"<h1> 用go-module作为包管理器搭建go的web服务器</h1>\\n<p>本篇博客主要介绍了如何从零开始，使用Go Module作为依赖管理，基于Gin来一步一步搭建Go的Web服务器。并使用Endless来使服务器平滑重启，使用Swagger来自动生成Api文档。</p>\\n<p>源码在此处：<a href=\\"https://github.com/detectiveHLH/go-backend-starter\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">项目源码</a></p>\\n<p>大家可以先查看源码，然后再根据本篇文章，来了解搭建过程中服务器的一些细节。</p>","copyright":{"author":"LeonSH"},"autoDesc":true}');export{e as data};
