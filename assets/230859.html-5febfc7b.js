import{_ as n,o as s,c as a,f as t}from"./app-7106bc71.js";const p="/images/230859/img-1.jpeg",e="/images/230859/img-2.jpeg",o={},c=t(`<h1 id="go源码解析-println的故事" tabindex="-1"><a class="header-anchor" href="#go源码解析-println的故事" aria-hidden="true">#</a> go源码解析-Println的故事</h1><p>本文主要通过平常常用的go的一个函数，深入源码，了解其底层到底是如何实现的。</p><h2 id="println" tabindex="-1"><a class="header-anchor" href="#println" aria-hidden="true">#</a> Println</h2><p>Println函数接受参数a，其类型为…interface{}。用过Java的对这个应该比较熟悉，Java中也有…的用法。其作用是传入可变的参数，而interface{}类似于Java中的Object，代表任何类型。</p><p>所以，…interface{}转换成Java的概念，就是<code>Object args ...</code>。</p><p>Println函数中没有什么实现，只是return了Fprintln函数。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">Println</span><span class="token punctuation">(</span>a <span class="token operator">...</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>n <span class="token builtin">int</span><span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token function">Fprintln</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>Stdout<span class="token punctuation">,</span> a<span class="token operator">...</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>而在此处的…放在了参数的后面。我们知道<code>...interface{}</code>是代表可变参数，即函数可接收任意数量的参数，而且参数参数分开写的。</p><p>当我们再调用这个函数的时候，我们就没有必要再将参数一个一个传给被调用函数了，直接使用a…就可以达到相同的效果。</p><h2 id="fprintln" tabindex="-1"><a class="header-anchor" href="#fprintln" aria-hidden="true">#</a> Fprintln</h2><p>该函数接收参数os.Stdout.write，和需要打印的数据作为参数。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">Fprintln</span><span class="token punctuation">(</span>w io<span class="token punctuation">.</span>Writer<span class="token punctuation">,</span> a <span class="token operator">...</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>n <span class="token builtin">int</span><span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	p <span class="token operator">:=</span> <span class="token function">newPrinter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	p<span class="token punctuation">.</span><span class="token function">doPrintln</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
	n<span class="token punctuation">,</span> err <span class="token operator">=</span> w<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>buf<span class="token punctuation">)</span>
	p<span class="token punctuation">.</span><span class="token function">free</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">return</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="sync-pool" tabindex="-1"><a class="header-anchor" href="#sync-pool" aria-hidden="true">#</a> sync.Pool</h3><p>从广义上看，newPrinter申请了一个临时对象池。我们逐行来看newPrinter函数做了什么。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">var</span> ppFree <span class="token operator">=</span> sync<span class="token punctuation">.</span>Pool<span class="token punctuation">{</span>
	New<span class="token punctuation">:</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token function">new</span><span class="token punctuation">(</span>pp<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token comment">// newPrinter allocates a new pp struct or grabs a cached one.</span>
<span class="token keyword">func</span> <span class="token function">newPrinter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span>pp <span class="token punctuation">{</span>
	p <span class="token operator">:=</span> ppFree<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token operator">*</span>pp<span class="token punctuation">)</span>
	p<span class="token punctuation">.</span>panicking <span class="token operator">=</span> <span class="token boolean">false</span>
	p<span class="token punctuation">.</span>erroring <span class="token operator">=</span> <span class="token boolean">false</span>
	p<span class="token punctuation">.</span>wrapErrs <span class="token operator">=</span> <span class="token boolean">false</span>
	p<span class="token punctuation">.</span>fmt<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>p<span class="token punctuation">.</span>buf<span class="token punctuation">)</span>
	<span class="token keyword">return</span> p
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>sync.Pool是go的临时对象池，用于存储被分配了但是没有被使用，但是未来可能会使用的值。以此来减少 GC的压力。</p><h3 id="ppfree-get" tabindex="-1"><a class="header-anchor" href="#ppfree-get" aria-hidden="true">#</a> ppFree.Get</h3><p>ppFree.Get()上有大量的注释。</p><blockquote><p>Get selects an arbitrary item from the Pool, removes it from the Pool, and returns it to the caller.</p><p>Get may choose to ignore the pool and treat it as empty. Callers should not assume any relation between values passed to Put and the values returned by Get.</p><p>If Get would otherwise return nil and p.New is non-nil, Get returns the result of calling p.New.</p></blockquote><p>麻瓜翻译一波。</p><blockquote><p>Get会从临时对象池中任意选一个printer返回给调用者，并且将此项从对象池中移除。</p><p>Get也可以选择把临时对象池当成空的忽略。调用者不应该假设传递给Put方法的值和Get返回的值之间存在任何关系。</p><p>如果Get返回nil或者p，New就一定不为空。Get将返回调用p.New的结果。</p></blockquote><p>上面提到的Put方法，作用是将对象加入到临时对象池中。</p><p><code>p := ppFree.Get().(*pp)</code>下面的三个参数分别代表什么呢？</p><table><thead><tr><th>参数名</th><th style="text-align:left;">用途</th></tr></thead><tbody><tr><td>p.panicking</td><td style="text-align:left;">由catchPanic设置，是为了避免在panic和recover中无限循环</td></tr><tr><td>p.erroring</td><td style="text-align:left;">当打印错误的标识符的时候，防止调用handleMethods</td></tr><tr><td>p.wrapErrs</td><td style="text-align:left;">当格式字符串包含了动词时的设置</td></tr><tr><td>fmt.init</td><td style="text-align:left;">初始化 fmt 配置，会设置 buf 并且清空 fmtFlags 标志位</td></tr></tbody></table><p>然后就返回这个新建的printer给调用方。</p><h2 id="doprintln" tabindex="-1"><a class="header-anchor" href="#doprintln" aria-hidden="true">#</a> doPrintln</h2><p>接下来是doPrintln函数。</p><p>doPrintln就跟doPrint类似，但是doPrintln总是会在参数之间添加一个空格，并且在最后一个参数后面添加换行符。以下是两种输出方式的对比。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;test&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;word&quot;</span><span class="token punctuation">)</span> <span class="token comment">// test hello word</span>
fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token string">&quot;test&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;word&quot;</span><span class="token punctuation">)</span>   <span class="token comment">// testhelloword% </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>看了样例，我们再具体看一下doPrintln的具体实现。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>p <span class="token operator">*</span>pp<span class="token punctuation">)</span> <span class="token function">doPrintln</span><span class="token punctuation">(</span>a <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">for</span> argNum<span class="token punctuation">,</span> arg <span class="token operator">:=</span> <span class="token keyword">range</span> a <span class="token punctuation">{</span>
		<span class="token keyword">if</span> argNum <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token punctuation">{</span>
			p<span class="token punctuation">.</span>buf<span class="token punctuation">.</span><span class="token function">writeByte</span><span class="token punctuation">(</span><span class="token char">&#39; &#39;</span><span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
		p<span class="token punctuation">.</span><span class="token function">printArg</span><span class="token punctuation">(</span>arg<span class="token punctuation">,</span> <span class="token char">&#39;v&#39;</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	p<span class="token punctuation">.</span>buf<span class="token punctuation">.</span><span class="token function">writeByte</span><span class="token punctuation">(</span><span class="token char">&#39;\\n&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个函数的思路很清晰。遍历所有传入的需要print的参数，在除了第一个 参数以外的所有参数的前面加上一个空格，写入buffer中。然后调用printArg函数，再将换行符写入buffer中。</p><p>writeByte的实现很简单，使用了append函数，将传入的参数，append到buffer中。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>b <span class="token operator">*</span>buffer<span class="token punctuation">)</span> <span class="token function">writeByte</span><span class="token punctuation">(</span>c <span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token operator">*</span>b <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span><span class="token operator">*</span>b<span class="token punctuation">,</span> c<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="printarg" tabindex="-1"><a class="header-anchor" href="#printarg" aria-hidden="true">#</a> printArg</h2><p>从上可以看出，调用printArg函数的时候，传入了两个参数。</p><p>第一个是需要打印的参数，第二个则是verb，在doPrintln中我们传的是单引号的v。那么在go中的单引号和双引号有什么区别呢？下面我们通过一个表格来对比一下在不同的语言中，单引号和双引号的区别。</p><table><thead><tr><th>语言</th><th>单引号</th><th>双引号</th></tr></thead><tbody><tr><td>Java</td><td>char</td><td>String</td></tr><tr><td>JavaScript</td><td>string</td><td>string</td></tr><tr><td>go</td><td>rune</td><td>String</td></tr><tr><td>Python</td><td>string</td><td>string</td></tr></tbody></table><h3 id="rune" tabindex="-1"><a class="header-anchor" href="#rune" aria-hidden="true">#</a> rune</h3><p>那么rune到底是什么类型呢？rune是int32的别名，在任何方面等于int32相同，用于区分字符串和整形。其实现很简单，<code>type rune = int32</code>，rune常用来表示Unicode中的码点，其例子如下所示。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>str <span class="token operator">:=</span> <span class="token string">&quot;hello 你好&quot;</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">rune</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// [104 101 108 108 111 32 20320 22909]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>说到了rune就不得不说一下byte。同样，我们通过例子来看一下byte和rune的区别。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>str <span class="token operator">:=</span> <span class="token string">&quot;hello 你好&quot;</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">rune</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// [104 101 108 108 111 32 20320 22909]</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// [104 101 108 108 111 32 228 189 160 229 165 189]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>没错，区别就在类型上。rune是<code>type rune = int32</code>，一个字节；而byte是<code>type byte = uint8</code>，四个字节。实际上，golang中的字符串的底层是靠byte数组实现的。如果我们处理的数据中出现了中文字符，都可用rune来处理。例如。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>str <span class="token operator">:=</span> <span class="token string">&quot;hello 你好&quot;</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span>         <span class="token comment">// 12</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">rune</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 8</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="printarg具体实现" tabindex="-1"><a class="header-anchor" href="#printarg具体实现" aria-hidden="true">#</a> printArg具体实现</h3><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>p <span class="token operator">*</span>pp<span class="token punctuation">)</span> <span class="token function">printArg</span><span class="token punctuation">(</span>arg <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> verb <span class="token builtin">rune</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	p<span class="token punctuation">.</span>arg <span class="token operator">=</span> arg
	p<span class="token punctuation">.</span>value <span class="token operator">=</span> reflect<span class="token punctuation">.</span>Value<span class="token punctuation">{</span><span class="token punctuation">}</span>

	<span class="token keyword">if</span> arg <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token keyword">switch</span> verb <span class="token punctuation">{</span>
		<span class="token keyword">case</span> <span class="token char">&#39;T&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;v&#39;</span><span class="token punctuation">:</span>
			p<span class="token punctuation">.</span>fmt<span class="token punctuation">.</span><span class="token function">padString</span><span class="token punctuation">(</span>nilAngleString<span class="token punctuation">)</span>
		<span class="token keyword">default</span><span class="token punctuation">:</span>
			p<span class="token punctuation">.</span><span class="token function">badVerb</span><span class="token punctuation">(</span>verb<span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">return</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">switch</span> verb <span class="token punctuation">{</span>
	<span class="token keyword">case</span> <span class="token char">&#39;T&#39;</span><span class="token punctuation">:</span>
		p<span class="token punctuation">.</span>fmt<span class="token punctuation">.</span><span class="token function">fmtS</span><span class="token punctuation">(</span>reflect<span class="token punctuation">.</span><span class="token function">TypeOf</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token keyword">return</span>
	<span class="token keyword">case</span> <span class="token char">&#39;p&#39;</span><span class="token punctuation">:</span>
		p<span class="token punctuation">.</span><span class="token function">fmtPointer</span><span class="token punctuation">(</span>reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token char">&#39;p&#39;</span><span class="token punctuation">)</span>
		<span class="token keyword">return</span>
	<span class="token punctuation">}</span>

  <span class="token keyword">switch</span> f <span class="token operator">:=</span> arg<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token keyword">type</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">case</span> <span class="token builtin">bool</span><span class="token punctuation">:</span>
		p<span class="token punctuation">.</span><span class="token function">fmtBool</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> verb<span class="token punctuation">)</span>
	<span class="token keyword">case</span> <span class="token builtin">float32</span><span class="token punctuation">:</span>
		p<span class="token punctuation">.</span><span class="token function">fmtFloat</span><span class="token punctuation">(</span><span class="token function">float64</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> verb<span class="token punctuation">)</span>
	<span class="token keyword">case</span> <span class="token builtin">float64</span><span class="token punctuation">:</span>
		p<span class="token punctuation">.</span><span class="token function">fmtFloat</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">,</span> verb<span class="token punctuation">)</span>
	<span class="token keyword">case</span> <span class="token builtin">complex64</span><span class="token punctuation">:</span>
		p<span class="token punctuation">.</span><span class="token function">fmtComplex</span><span class="token punctuation">(</span><span class="token function">complex128</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">,</span> verb<span class="token punctuation">)</span>
	<span class="token keyword">case</span> <span class="token builtin">complex128</span><span class="token punctuation">:</span>
		p<span class="token punctuation">.</span><span class="token function">fmtComplex</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">,</span> verb<span class="token punctuation">)</span>
	<span class="token keyword">case</span> <span class="token builtin">int</span><span class="token punctuation">:</span>
		p<span class="token punctuation">.</span><span class="token function">fmtInteger</span><span class="token punctuation">(</span><span class="token function">uint64</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">,</span> signed<span class="token punctuation">,</span> verb<span class="token punctuation">)</span>
	<span class="token keyword">case</span> <span class="token builtin">int8</span><span class="token punctuation">:</span>
		p<span class="token punctuation">.</span><span class="token function">fmtInteger</span><span class="token punctuation">(</span><span class="token function">uint64</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">,</span> signed<span class="token punctuation">,</span> verb<span class="token punctuation">)</span>
	<span class="token keyword">case</span> <span class="token builtin">int16</span><span class="token punctuation">:</span>
		p<span class="token punctuation">.</span><span class="token function">fmtInteger</span><span class="token punctuation">(</span><span class="token function">uint64</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">,</span> signed<span class="token punctuation">,</span> verb<span class="token punctuation">)</span>
	<span class="token keyword">case</span> <span class="token builtin">int32</span><span class="token punctuation">:</span>
		p<span class="token punctuation">.</span><span class="token function">fmtInteger</span><span class="token punctuation">(</span><span class="token function">uint64</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">,</span> signed<span class="token punctuation">,</span> verb<span class="token punctuation">)</span>
	<span class="token keyword">case</span> <span class="token builtin">int64</span><span class="token punctuation">:</span>
		p<span class="token punctuation">.</span><span class="token function">fmtInteger</span><span class="token punctuation">(</span><span class="token function">uint64</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">,</span> signed<span class="token punctuation">,</span> verb<span class="token punctuation">)</span>
	<span class="token keyword">case</span> <span class="token builtin">uint</span><span class="token punctuation">:</span>
		p<span class="token punctuation">.</span><span class="token function">fmtInteger</span><span class="token punctuation">(</span><span class="token function">uint64</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">,</span> unsigned<span class="token punctuation">,</span> verb<span class="token punctuation">)</span>
	<span class="token keyword">case</span> <span class="token builtin">uint8</span><span class="token punctuation">:</span>
		p<span class="token punctuation">.</span><span class="token function">fmtInteger</span><span class="token punctuation">(</span><span class="token function">uint64</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">,</span> unsigned<span class="token punctuation">,</span> verb<span class="token punctuation">)</span>
	<span class="token keyword">case</span> <span class="token builtin">uint16</span><span class="token punctuation">:</span>
		p<span class="token punctuation">.</span><span class="token function">fmtInteger</span><span class="token punctuation">(</span><span class="token function">uint64</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">,</span> unsigned<span class="token punctuation">,</span> verb<span class="token punctuation">)</span>
	<span class="token keyword">case</span> <span class="token builtin">uint32</span><span class="token punctuation">:</span>
		p<span class="token punctuation">.</span><span class="token function">fmtInteger</span><span class="token punctuation">(</span><span class="token function">uint64</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">,</span> unsigned<span class="token punctuation">,</span> verb<span class="token punctuation">)</span>
	<span class="token keyword">case</span> <span class="token builtin">uint64</span><span class="token punctuation">:</span>
		p<span class="token punctuation">.</span><span class="token function">fmtInteger</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> unsigned<span class="token punctuation">,</span> verb<span class="token punctuation">)</span>
	<span class="token keyword">case</span> <span class="token builtin">uintptr</span><span class="token punctuation">:</span>
		p<span class="token punctuation">.</span><span class="token function">fmtInteger</span><span class="token punctuation">(</span><span class="token function">uint64</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">,</span> unsigned<span class="token punctuation">,</span> verb<span class="token punctuation">)</span>
	<span class="token keyword">case</span> <span class="token builtin">string</span><span class="token punctuation">:</span>
		p<span class="token punctuation">.</span><span class="token function">fmtString</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> verb<span class="token punctuation">)</span>
	<span class="token keyword">case</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">:</span>
		p<span class="token punctuation">.</span><span class="token function">fmtBytes</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> verb<span class="token punctuation">,</span> <span class="token string">&quot;[]byte&quot;</span><span class="token punctuation">)</span>
	<span class="token keyword">case</span> reflect<span class="token punctuation">.</span>Value<span class="token punctuation">:</span>
		<span class="token keyword">if</span> f<span class="token punctuation">.</span><span class="token function">IsValid</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> f<span class="token punctuation">.</span><span class="token function">CanInterface</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			p<span class="token punctuation">.</span>arg <span class="token operator">=</span> f<span class="token punctuation">.</span><span class="token function">Interface</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
			<span class="token keyword">if</span> p<span class="token punctuation">.</span><span class="token function">handleMethods</span><span class="token punctuation">(</span>verb<span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token keyword">return</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
		p<span class="token punctuation">.</span><span class="token function">printValue</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> verb<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
	<span class="token keyword">default</span><span class="token punctuation">:</span>
		<span class="token keyword">if</span> <span class="token operator">!</span>p<span class="token punctuation">.</span><span class="token function">handleMethods</span><span class="token punctuation">(</span>verb<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			p<span class="token punctuation">.</span><span class="token function">printValue</span><span class="token punctuation">(</span>reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">,</span> verb<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到有一部分类型是通过反射获取到的，而大部分都是switch case出来的，并不是所有的类型都用的反射，相对的提高了效率。</p><p>例如，我们传入的是字符串。则接下来就会走到fmtString。</p><h3 id="fmtstring" tabindex="-1"><a class="header-anchor" href="#fmtstring" aria-hidden="true">#</a> fmtString</h3><p>从printArg中带来的参数有需要打印的字符串，以及rune类型的&#39;v&#39;。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>p <span class="token operator">*</span>pp<span class="token punctuation">)</span> <span class="token function">fmtString</span><span class="token punctuation">(</span>v <span class="token builtin">string</span><span class="token punctuation">,</span> verb <span class="token builtin">rune</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">switch</span> verb <span class="token punctuation">{</span>
	<span class="token keyword">case</span> <span class="token char">&#39;v&#39;</span><span class="token punctuation">:</span>
		<span class="token keyword">if</span> p<span class="token punctuation">.</span>fmt<span class="token punctuation">.</span>sharpV <span class="token punctuation">{</span>
			p<span class="token punctuation">.</span>fmt<span class="token punctuation">.</span><span class="token function">fmtQ</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span>
		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
			p<span class="token punctuation">.</span>fmt<span class="token punctuation">.</span><span class="token function">fmtS</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
	<span class="token keyword">case</span> <span class="token char">&#39;s&#39;</span><span class="token punctuation">:</span>
		p<span class="token punctuation">.</span>fmt<span class="token punctuation">.</span><span class="token function">fmtS</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span>
	<span class="token keyword">case</span> <span class="token char">&#39;x&#39;</span><span class="token punctuation">:</span>
		p<span class="token punctuation">.</span>fmt<span class="token punctuation">.</span><span class="token function">fmtSx</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> ldigits<span class="token punctuation">)</span>
	<span class="token keyword">case</span> <span class="token char">&#39;X&#39;</span><span class="token punctuation">:</span>
		p<span class="token punctuation">.</span>fmt<span class="token punctuation">.</span><span class="token function">fmtSx</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> udigits<span class="token punctuation">)</span>
	<span class="token keyword">case</span> <span class="token char">&#39;q&#39;</span><span class="token punctuation">:</span>
		p<span class="token punctuation">.</span>fmt<span class="token punctuation">.</span><span class="token function">fmtQ</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span>
	<span class="token keyword">default</span><span class="token punctuation">:</span>
		p<span class="token punctuation">.</span><span class="token function">badVerb</span><span class="token punctuation">(</span>verb<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>p.fmt.sharpV</code>在过程中没有被重新赋值，初始化的零值为false。所以下一步会进入fmtS。</p><h3 id="fmts" tabindex="-1"><a class="header-anchor" href="#fmts" aria-hidden="true">#</a> fmtS</h3><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>f <span class="token operator">*</span>fmt<span class="token punctuation">)</span> <span class="token function">fmtS</span><span class="token punctuation">(</span>s <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	s <span class="token operator">=</span> f<span class="token punctuation">.</span><span class="token function">truncateString</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>
	f<span class="token punctuation">.</span><span class="token function">padString</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果存在设定的精度，则truncate将字符串s截断为指定的精度。多用于需要输出数字时。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>f <span class="token operator">*</span>fmt<span class="token punctuation">)</span> <span class="token function">truncateString</span><span class="token punctuation">(</span>s <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> f<span class="token punctuation">.</span>precPresent <span class="token punctuation">{</span>
		n <span class="token operator">:=</span> f<span class="token punctuation">.</span>prec
		<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token keyword">range</span> s <span class="token punctuation">{</span>
			n<span class="token operator">--</span>
			<span class="token keyword">if</span> n <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">{</span>
				<span class="token keyword">return</span> s<span class="token punctuation">[</span><span class="token punctuation">:</span>i<span class="token punctuation">]</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> s
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>而padString则将字符串s写入buffer中，最后调用io的包输出就好了。</p><h2 id="free" tabindex="-1"><a class="header-anchor" href="#free" aria-hidden="true">#</a> free</h2><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>p <span class="token operator">*</span>pp<span class="token punctuation">)</span> <span class="token function">free</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> <span class="token function">cap</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>buf<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">64</span><span class="token operator">&lt;&lt;</span><span class="token number">10</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span>
	<span class="token punctuation">}</span>

	p<span class="token punctuation">.</span>buf <span class="token operator">=</span> p<span class="token punctuation">.</span>buf<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span>
	p<span class="token punctuation">.</span>arg <span class="token operator">=</span> <span class="token boolean">nil</span>
	p<span class="token punctuation">.</span>value <span class="token operator">=</span> reflect<span class="token punctuation">.</span>Value<span class="token punctuation">{</span><span class="token punctuation">}</span>
	p<span class="token punctuation">.</span>wrappedErr <span class="token operator">=</span> <span class="token boolean">nil</span>
	ppFree<span class="token punctuation">.</span><span class="token function">Put</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在前面讲过，要打印的时候，需要从临时对象池中获取一个对象，避免重复创建。而在此处，用完之后就需要通过Put函数将其放回临时对象池中，已备下次调用。</p><p>当然，并不是无限的将用过的变量放入对象池。如果缓冲区的大小超过了设定的阙值也就是65535，就无法再执行后续的操作了。</p><h2 id="写在最后" tabindex="-1"><a class="header-anchor" href="#写在最后" aria-hidden="true">#</a> 写在最后</h2><p>看源码是个技术活，其实这篇博客也算是一种尝试。最近看到一个图很有意思，跟大家分享一下。这张图讲的是你以为的看源码。</p><figure><img src="`+p+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>然后是实际上的你看源码。</p><figure><img src="'+e+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>这张图特别形象。当你打算看一个开源项目的源码的时候，往往像一个饿了很多天没吃饭的人看到一桌美食一样，恨不得几分钟就把桌上的东西全部吃完，最后撑的半死，全部吐了出来；又或许像上面两张图里的水一样，接的太快，最后杯子里剩的反而越少。</p><p>相反，如果我们慢慢的品味美食，慢慢的去接水，肚子里的食物和水杯的水就一定会慢慢增加，直到适量为止。</p><p>我认为看源码，不应该一口吃成胖子，细水长流。从某一个小功能开始，慢慢的展开，这样才能了解到更多的东西。</p>',70),i=[c];function u(l,r){return s(),a("div",null,i)}const d=n(o,[["render",u],["__file","230859.html.vue"]]);export{d as default};
