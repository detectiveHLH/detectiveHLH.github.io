import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as c,c as i,a as n,b as s,d as t,f as e}from"./app-c04a5f75.js";const l={},u=n("h1",{id:"用go-module作为包管理器搭建go的web服务器",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#用go-module作为包管理器搭建go的web服务器","aria-hidden":"true"},"#"),s(" 用go-module作为包管理器搭建go的web服务器")],-1),r=n("p",null,"本篇博客主要介绍了如何从零开始，使用Go Module作为依赖管理，基于Gin来一步一步搭建Go的Web服务器。并使用Endless来使服务器平滑重启，使用Swagger来自动生成Api文档。",-1),d={href:"https://github.com/detectiveHLH/go-backend-starter",target:"_blank",rel:"noopener noreferrer"},k=e(`<p>大家可以先查看源码，然后再根据本篇文章，来了解搭建过程中服务器的一些细节。</p><h2 id="搭建环境" tabindex="-1"><a class="header-anchor" href="#搭建环境" aria-hidden="true">#</a> 搭建环境</h2><p>以下所有的步骤都基于MacOS。</p><h3 id="安装go" tabindex="-1"><a class="header-anchor" href="#安装go" aria-hidden="true">#</a> 安装go</h3><p>在这里推荐使用homebrew进行安装。当然你也可以使用源码安装。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>brew <span class="token function">install</span> go
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>跑完命令之后，在命令行输入<code>go</code>。如果在命令行看到如下输出，则代表安装成功。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>Go is a tool <span class="token keyword">for</span> managing Go <span class="token builtin class-name">source</span> code.
Usage:
	go <span class="token operator">&lt;</span>command<span class="token operator">&gt;</span> <span class="token punctuation">[</span>arguments<span class="token punctuation">]</span>
The commands are:
<span class="token punctuation">..</span>.
<span class="token punctuation">..</span>.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>需要注意的是，go的版本需要在<code>1.11</code>之上，否则无法使用go module。以下是我的go的版本。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>go version
<span class="token comment"># go version go1.12.5 darwin/amd64</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="ide" tabindex="-1"><a class="header-anchor" href="#ide" aria-hidden="true">#</a> IDE</h3>`,11),v={href:"https://www.jetbrains.com/go/",target:"_blank",rel:"noopener noreferrer"},m=e(`<h3 id="配置gopath" tabindex="-1"><a class="header-anchor" href="#配置gopath" aria-hidden="true">#</a> 配置GOPATH</h3><p>打开GoLand，在GoLand的设置中找到Global GOPATH，将其设置为<code>$HOME/go</code>。<code>$HOME</code>目录就是你的电脑的用户目录，如果该目录下没有<code>go</code>目录的话，也不需要新建，当我们在后面的操作中初始化模块的时候，会自动的在用户目录下新建go目录。</p><h3 id="启用go-module" tabindex="-1"><a class="header-anchor" href="#启用go-module" aria-hidden="true">#</a> 启用GO Module</h3><p>同样，在GoLand中设置中找到Go Modules (vgo)。勾选Enable Go Modules (vgo) integration前的选择框来启用Go Moudle</p><h2 id="搭建项目框架" tabindex="-1"><a class="header-anchor" href="#搭建项目框架" aria-hidden="true">#</a> 搭建项目框架</h2><h3 id="新建目录" tabindex="-1"><a class="header-anchor" href="#新建目录" aria-hidden="true">#</a> 新建目录</h3><p>在你常用的工作区新建一个目录，如果你有github的项目，可以直接clone下来。</p><h3 id="初始化go-module" tabindex="-1"><a class="header-anchor" href="#初始化go-module" aria-hidden="true">#</a> 初始化go module</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>go mod init <span class="token variable">$MODULE_NAME</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在刚刚新建的项目的根目录下，使用上述命令来初始化go module。该命令会在项目根目录下新建一个go.mod的文件。</p><p>如果你的项目是从github上clone下来的，<code>$MODULE_NAME</code>这个参数就不需要了。它会默认为<code>github.com/$GITHUB_USER_NAME/$PROJECT_NAME</code>。</p><p>例如本项目就是<code>github.com/detectiveHLH/go-backend-starter</code>；如果是在本地新建的项目，则必须要加上最后一个参数。否则就会遇到如下的错误。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>go: cannot determine module path <span class="token keyword">for</span> <span class="token builtin class-name">source</span> directory /Users/hulunhao/Projects/go/test/src <span class="token punctuation">(</span>outside GOPATH, no <span class="token function">import</span> comments<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>初始化完成之后的<code>go.mod</code>文件内容如下。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>module github<span class="token punctuation">.</span>com<span class="token operator">/</span>detectiveHLH<span class="token operator">/</span><span class="token keyword">go</span><span class="token operator">-</span>backend<span class="token operator">-</span>starter

<span class="token keyword">go</span> <span class="token number">1.12</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="新建main-go" tabindex="-1"><a class="header-anchor" href="#新建main-go" aria-hidden="true">#</a> 新建main.go</h3><p>在项目的根目录下新建main.go。代码如下。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">&quot;fmt&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;This works&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="运行main-go" tabindex="-1"><a class="header-anchor" href="#运行main-go" aria-hidden="true">#</a> 运行main.go</h3><p>在根目录下使用<code>go run main.go</code>，如果看到命令行中输出<code>This works</code>则代表基础的框架已经搭建完成。接下来我们开始将Gin引入框架。</p><h2 id="引入gin" tabindex="-1"><a class="header-anchor" href="#引入gin" aria-hidden="true">#</a> 引入Gin</h2>`,21),g={href:"https://gin-gonic.com/",target:"_blank",rel:"noopener noreferrer"},b=e(`<h3 id="安装gin" tabindex="-1"><a class="header-anchor" href="#安装gin" aria-hidden="true">#</a> 安装Gin</h3><p>直接通过go get命令来安装</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>go get github.com/gin-gonic/gin
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>安装成功之后，我们可以看到go.mod文件中的内容发生了变化。</p><p>并且，我们在设定的GOPATH下，并没有看到刚刚安装的依赖。实际上，依赖安装到了$GOPATH/pkg/mod下。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>module github<span class="token punctuation">.</span>com<span class="token operator">/</span>detectiveHLH<span class="token operator">/</span><span class="token keyword">go</span><span class="token operator">-</span>backend<span class="token operator">-</span>starter

<span class="token keyword">go</span> <span class="token number">1.12</span>

require github<span class="token punctuation">.</span>com<span class="token operator">/</span>gin<span class="token operator">-</span>gonic<span class="token operator">/</span>gin v1<span class="token punctuation">.</span><span class="token number">4.0</span> <span class="token comment">// indirect</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>同时，也生成了一个go.sum文件。内容如下。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>github<span class="token punctuation">.</span>com<span class="token operator">/</span>davecgh<span class="token operator">/</span><span class="token keyword">go</span><span class="token operator">-</span>spew v1<span class="token punctuation">.</span><span class="token number">1.0</span><span class="token operator">/</span><span class="token keyword">go</span><span class="token punctuation">.</span>mod h1<span class="token punctuation">:</span>J7Y8YcW2NihsgmVo<span class="token operator">/</span>mv3lAwl<span class="token operator">/</span>skON4iLHjSsI<span class="token operator">+</span>c5H38<span class="token operator">=</span>
github<span class="token punctuation">.</span>com<span class="token operator">/</span>gin<span class="token operator">-</span>contrib<span class="token operator">/</span>sse v0<span class="token punctuation">.</span><span class="token number">0.0</span><span class="token operator">-</span><span class="token number">20190301062529</span><span class="token operator">-</span>5545eab6dad3 h1<span class="token punctuation">:</span>t8FVkw33L<span class="token operator">+</span>wilf2QiWkw0UV77qRpcH<span class="token operator">/</span>JHPKGpKa2E8g<span class="token operator">=</span>
github<span class="token punctuation">.</span>com<span class="token operator">/</span>gin<span class="token operator">-</span>contrib<span class="token operator">/</span>sse v0<span class="token punctuation">.</span><span class="token number">0.0</span><span class="token operator">-</span><span class="token number">20190301062529</span><span class="token operator">-</span>5545eab6dad3<span class="token operator">/</span><span class="token keyword">go</span><span class="token punctuation">.</span>mod h1<span class="token punctuation">:</span>VJ0WA2NBN22VlZ2dKZQPAPnyWw5XTlK1KymzLKsr59s<span class="token operator">=</span>
github<span class="token punctuation">.</span>com<span class="token operator">/</span>gin<span class="token operator">-</span>gonic<span class="token operator">/</span>gin v1<span class="token punctuation">.</span><span class="token number">4.0</span> h1<span class="token punctuation">:</span>3tMoCCfM7ppqsR0ptz<span class="token operator">/</span>wi1impNpT7<span class="token operator">/</span>9wQtMZ8lr1mCQ<span class="token operator">=</span>
github<span class="token punctuation">.</span>com<span class="token operator">/</span>gin<span class="token operator">-</span>gonic<span class="token operator">/</span>gin v1<span class="token punctuation">.</span><span class="token number">4.0</span><span class="token operator">/</span><span class="token keyword">go</span><span class="token punctuation">.</span>mod h1<span class="token punctuation">:</span>OW2EZn3DO8Ln9oIKOvM<span class="token operator">++</span>LBO<span class="token operator">+</span>5UPHJJDH72<span class="token operator">/</span>q<span class="token operator">/</span>3rZdM<span class="token operator">=</span>
github<span class="token punctuation">.</span>com<span class="token operator">/</span>golang<span class="token operator">/</span>protobuf v1<span class="token punctuation">.</span><span class="token number">3.1</span> h1<span class="token punctuation">:</span>YF8<span class="token operator">+</span>flBXS5eO826T4nzqPrxfhQThhXl0YzfuUPu4SBg<span class="token operator">=</span>
github<span class="token punctuation">.</span>com<span class="token operator">/</span>golang<span class="token operator">/</span>protobuf v1<span class="token punctuation">.</span><span class="token number">3.1</span><span class="token operator">/</span><span class="token keyword">go</span><span class="token punctuation">.</span>mod h1<span class="token punctuation">:</span>6lQm79b<span class="token operator">+</span>lXiMfvg<span class="token operator">/</span>cZm0SGofjICqVBUtrP5yJMmIC1U<span class="token operator">=</span>
github<span class="token punctuation">.</span>com<span class="token operator">/</span>json<span class="token operator">-</span>iterator<span class="token operator">/</span><span class="token keyword">go</span> v1<span class="token punctuation">.</span><span class="token number">1.6</span><span class="token operator">/</span><span class="token keyword">go</span><span class="token punctuation">.</span>mod h1<span class="token punctuation">:</span><span class="token operator">+</span>SdeFBvtyEkXs7REEP0seUULqWtbJapLOCVDaaPEHmU<span class="token operator">=</span>
github<span class="token punctuation">.</span>com<span class="token operator">/</span>mattn<span class="token operator">/</span><span class="token keyword">go</span><span class="token operator">-</span>isatty v0<span class="token punctuation">.</span><span class="token number">0.7</span> h1<span class="token punctuation">:</span>UvyT9uN<span class="token operator">+</span>3r7yLEYSlJsbQGdsaB<span class="token operator">/</span>a0DlgWP3pql6iwOc<span class="token operator">=</span>
github<span class="token punctuation">.</span>com<span class="token operator">/</span>mattn<span class="token operator">/</span><span class="token keyword">go</span><span class="token operator">-</span>isatty v0<span class="token punctuation">.</span><span class="token number">0.7</span><span class="token operator">/</span><span class="token keyword">go</span><span class="token punctuation">.</span>mod h1<span class="token punctuation">:</span>Iq45c<span class="token operator">/</span>XA43vh69<span class="token operator">/</span>j3iqttzPXn0bhXyGjM0Hdxcsrc5s<span class="token operator">=</span>
github<span class="token punctuation">.</span>com<span class="token operator">/</span>modern<span class="token operator">-</span><span class="token keyword">go</span><span class="token operator">/</span>concurrent v0<span class="token punctuation">.</span><span class="token number">0.0</span><span class="token operator">-</span><span class="token number">20180306012644</span><span class="token operator">-</span>bacd9c7ef1dd<span class="token operator">/</span><span class="token keyword">go</span><span class="token punctuation">.</span>mod h1<span class="token punctuation">:</span>6dJC0mAP4ikYIbvyc7fijjWJddQyLn8Ig3JB5CqoB9Q<span class="token operator">=</span>
github<span class="token punctuation">.</span>com<span class="token operator">/</span>modern<span class="token operator">-</span><span class="token keyword">go</span><span class="token operator">/</span>reflect2 v1<span class="token punctuation">.</span><span class="token number">0.1</span><span class="token operator">/</span><span class="token keyword">go</span><span class="token punctuation">.</span>mod h1<span class="token punctuation">:</span>bx2lNnkwVCuqBIxFjflWJWanXIb3RllmbCylyMrvgv0<span class="token operator">=</span>
github<span class="token punctuation">.</span>com<span class="token operator">/</span>pmezard<span class="token operator">/</span><span class="token keyword">go</span><span class="token operator">-</span>difflib v1<span class="token punctuation">.</span><span class="token number">0.0</span><span class="token operator">/</span><span class="token keyword">go</span><span class="token punctuation">.</span>mod h1<span class="token punctuation">:</span>iKH77koFhYxTK1pcRnkKkqfTogsbg7gZNVY4sRDYZ<span class="token operator">/</span><span class="token number">4</span><span class="token operator">=</span>
github<span class="token punctuation">.</span>com<span class="token operator">/</span>stretchr<span class="token operator">/</span>objx v0<span class="token punctuation">.</span><span class="token number">1.0</span><span class="token operator">/</span><span class="token keyword">go</span><span class="token punctuation">.</span>mod h1<span class="token punctuation">:</span>HFkY916IF<span class="token operator">+</span>rwdDfMAkV7OtwuqBVzrE8GR6GFx<span class="token operator">+</span>wExME<span class="token operator">=</span>
github<span class="token punctuation">.</span>com<span class="token operator">/</span>stretchr<span class="token operator">/</span>testify v1<span class="token punctuation">.</span><span class="token number">3.0</span><span class="token operator">/</span><span class="token keyword">go</span><span class="token punctuation">.</span>mod h1<span class="token punctuation">:</span>M5WIy9Dh21IEIfnGCwXGc5bZfKNJtfHm1UVUgZn<span class="token operator">+</span>9EI<span class="token operator">=</span>
github<span class="token punctuation">.</span>com<span class="token operator">/</span>ugorji<span class="token operator">/</span><span class="token keyword">go</span> v1<span class="token punctuation">.</span><span class="token number">1.4</span> h1<span class="token punctuation">:</span>j4s<span class="token operator">+</span>tAvLfL3bZyefP2SEWmhBzmuIlH<span class="token operator">/</span>eqNuPdFPgngw<span class="token operator">=</span>
github<span class="token punctuation">.</span>com<span class="token operator">/</span>ugorji<span class="token operator">/</span><span class="token keyword">go</span> v1<span class="token punctuation">.</span><span class="token number">1.4</span><span class="token operator">/</span><span class="token keyword">go</span><span class="token punctuation">.</span>mod h1<span class="token punctuation">:</span>uQMGLiO92mf5W77hV<span class="token operator">/</span>PUCpI3pbzQx3CRekS0kk<span class="token operator">+</span>RGrc<span class="token operator">=</span>
golang<span class="token punctuation">.</span>org<span class="token operator">/</span>x<span class="token operator">/</span>crypto v0<span class="token punctuation">.</span><span class="token number">0.0</span><span class="token operator">-</span><span class="token number">20190308221718</span><span class="token operator">-</span>c2843e01d9a2<span class="token operator">/</span><span class="token keyword">go</span><span class="token punctuation">.</span>mod h1<span class="token punctuation">:</span>djNgcEr1<span class="token operator">/</span>C05ACkg1iLfiJU5Ep61QUkGW8qpdssI0<span class="token operator">+</span>w<span class="token operator">=</span>
golang<span class="token punctuation">.</span>org<span class="token operator">/</span>x<span class="token operator">/</span>net v0<span class="token punctuation">.</span><span class="token number">0.0</span><span class="token operator">-</span><span class="token number">20190503192946</span><span class="token operator">-</span>f4e77d36d62c<span class="token operator">/</span><span class="token keyword">go</span><span class="token punctuation">.</span>mod h1<span class="token punctuation">:</span>t9HGtf8HONx5eT2rtn7q6eTqICYqUVnKs3thJo3Qplg<span class="token operator">=</span>
golang<span class="token punctuation">.</span>org<span class="token operator">/</span>x<span class="token operator">/</span>sys v0<span class="token punctuation">.</span><span class="token number">0.0</span><span class="token operator">-</span><span class="token number">20190215142949</span><span class="token operator">-</span>d0b11bdaac8a<span class="token operator">/</span><span class="token keyword">go</span><span class="token punctuation">.</span>mod h1<span class="token punctuation">:</span>STP8DvDyc<span class="token operator">/</span>dI5b8T5hshtkjS<span class="token operator">+</span>E42TnysNCUPdjciGhY<span class="token operator">=</span>
golang<span class="token punctuation">.</span>org<span class="token operator">/</span>x<span class="token operator">/</span>sys v0<span class="token punctuation">.</span><span class="token number">0.0</span><span class="token operator">-</span><span class="token number">20190222072716</span><span class="token operator">-</span>a9d3bda3a223<span class="token operator">/</span><span class="token keyword">go</span><span class="token punctuation">.</span>mod h1<span class="token punctuation">:</span>STP8DvDyc<span class="token operator">/</span>dI5b8T5hshtkjS<span class="token operator">+</span>E42TnysNCUPdjciGhY<span class="token operator">=</span>
golang<span class="token punctuation">.</span>org<span class="token operator">/</span>x<span class="token operator">/</span>text v0<span class="token punctuation">.</span><span class="token number">3.0</span><span class="token operator">/</span><span class="token keyword">go</span><span class="token punctuation">.</span>mod h1<span class="token punctuation">:</span>NqM8EUOU14njkJ3fqMW<span class="token operator">+</span>pc6Ldnwhi<span class="token operator">/</span>IjpwHt7yyuwOQ<span class="token operator">=</span>
gopkg<span class="token punctuation">.</span>in<span class="token operator">/</span>check<span class="token punctuation">.</span>v1 v0<span class="token punctuation">.</span><span class="token number">0.0</span><span class="token operator">-</span><span class="token number">20161208181325</span><span class="token operator">-</span>20d25e280405<span class="token operator">/</span><span class="token keyword">go</span><span class="token punctuation">.</span>mod h1<span class="token punctuation">:</span>Co6ibVJAznAaIkqp8huTwlJQCZ016jof<span class="token operator">/</span>cbN4VW5Yz0<span class="token operator">=</span>
gopkg<span class="token punctuation">.</span>in<span class="token operator">/</span><span class="token keyword">go</span><span class="token operator">-</span>playground<span class="token operator">/</span>assert<span class="token punctuation">.</span>v1 v1<span class="token punctuation">.</span><span class="token number">2.1</span><span class="token operator">/</span><span class="token keyword">go</span><span class="token punctuation">.</span>mod h1<span class="token punctuation">:</span>9RXL0bg<span class="token operator">/</span>zibRAgZUYszZSwO<span class="token operator">/</span>z8Y<span class="token operator">/</span>a8bDuhia5mkpMnE<span class="token operator">=</span>
gopkg<span class="token punctuation">.</span>in<span class="token operator">/</span><span class="token keyword">go</span><span class="token operator">-</span>playground<span class="token operator">/</span>validator<span class="token punctuation">.</span>v8 v8<span class="token punctuation">.</span><span class="token number">18.2</span> h1<span class="token punctuation">:</span>lFB4DoMU6B626w8ny76MV7VX6W2VHct2GVOI3xgiMrQ<span class="token operator">=</span>
gopkg<span class="token punctuation">.</span>in<span class="token operator">/</span><span class="token keyword">go</span><span class="token operator">-</span>playground<span class="token operator">/</span>validator<span class="token punctuation">.</span>v8 v8<span class="token punctuation">.</span><span class="token number">18.2</span><span class="token operator">/</span><span class="token keyword">go</span><span class="token punctuation">.</span>mod h1<span class="token punctuation">:</span>RX2a<span class="token operator">/</span>7Ha8BgOhfk7j780h4<span class="token operator">/</span>u<span class="token operator">/</span>RRjR0eouCJSH80<span class="token operator">/</span>M2Y<span class="token operator">=</span>
gopkg<span class="token punctuation">.</span>in<span class="token operator">/</span>yaml<span class="token punctuation">.</span>v2 v2<span class="token punctuation">.</span><span class="token number">2.2</span> h1<span class="token punctuation">:</span>ZCJp<span class="token operator">+</span>EgiOT7lHqUV2J862kp8Qj64Jo6az82<span class="token operator">+</span>3Td9dZw<span class="token operator">=</span>
gopkg<span class="token punctuation">.</span>in<span class="token operator">/</span>yaml<span class="token punctuation">.</span>v2 v2<span class="token punctuation">.</span><span class="token number">2.2</span><span class="token operator">/</span><span class="token keyword">go</span><span class="token punctuation">.</span>mod h1<span class="token punctuation">:</span>hI93XBmqTisBFMUTm0b8Fm<span class="token operator">+</span>jr3Dg1NNxqwp<span class="token operator">+</span>5A1VGuI<span class="token operator">=</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>用过Node的人都知道，在安装完依赖之后会生成一个package-lock.json文件，来锁定依赖的版本。以防止后面重新安装依赖时，安装了新的版本，但是与现有的代码不兼容，这会带来一些不必要的BUG。</p><p>但是这个go.sum文件并不是这个作用。我们可以看到go.mod中只记录了一个Gin的依赖，而go.sum中则有非常多。是因为go.mod中只记录了最顶层，就是我们直接使用命令行安装的依赖。但是要知道，一个开源的包通常都会依赖很多其他的依赖包。</p><p>而go.sum就是记录所有顶层和其中间接依赖的依赖包的特定版本的文件，为每一个依赖版本生成一个特定的哈希值，从而在一个新环境启用该项目时，可以做到对项目依赖的100%还原。go.sum还会保留一些过去使用过的版本的信息。</p><p>在go module下，不需要vendor目录来保证可重现的构建，而是通过go.mod文件来对项目中的每一个依赖进行精确的版本管理。</p><p>如果之前的项目用的是vendor，那么重新用go.mod重新编写不太现实。我们可以使用<code>go mod vendor</code>命令将之前项目所有的依赖拷贝到vendor目录下，为了保证兼容性，在vendor目录下的依赖并不像go.mod一样。拷贝之后的目录不包含版本号。</p><p>而且通过上面安装gin可以看出，通常情况下，go.mod文件是不需要我们手动编辑的，当我们执行完命令之后，go.mod也会自动的更新相应的依赖和版本号。</p><p>下面我们来了解一下go mod的相关命令。</p><ul><li>init 初始化go module</li><li>download 下载go.mod中的依赖到本地的缓存目录中（$GOPATH/pkg/mod）下</li><li>edit 编辑go.mod，通过命令行手动升级和获取依赖</li><li>vendor 将项目依赖拷贝到vendor下</li><li>tidy 安装缺少的依赖，舍弃无用的依赖</li><li>graph 打印模块依赖图</li><li>verify 验证依赖是否正确</li></ul><p>还有一个命令值得提一下，<code>go list -m all</code>可以列出当前项目的构建列表。</p><h3 id="修改main-go" tabindex="-1"><a class="header-anchor" href="#修改main-go" aria-hidden="true">#</a> 修改main.go</h3><p>修改main.go的代码如下。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">&quot;fmt&quot;</span>
	<span class="token string">&quot;github.com/gin-gonic/gin&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;This works.&quot;</span><span class="token punctuation">)</span>
	r <span class="token operator">:=</span> gin<span class="token punctuation">.</span><span class="token function">Default</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	r<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">&quot;/hello&quot;</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		c<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> gin<span class="token punctuation">.</span>H<span class="token punctuation">{</span>
			<span class="token string">&quot;success&quot;</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
			<span class="token string">&quot;code&quot;</span><span class="token punctuation">:</span> <span class="token number">200</span><span class="token punctuation">,</span>
			<span class="token string">&quot;message&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;This works&quot;</span><span class="token punctuation">,</span>
			<span class="token string">&quot;data&quot;</span><span class="token punctuation">:</span> <span class="token boolean">nil</span><span class="token punctuation">,</span>
		<span class="token punctuation">}</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span>
	r<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述的代码引入了路由，熟悉Node的应该可以看出，这个与koa-router的用法十分相似。</p><h3 id="启动服务器" tabindex="-1"><a class="header-anchor" href="#启动服务器" aria-hidden="true">#</a> 启动服务器</h3><p>照着上述运行main.go的步骤，运行main.go。就可以在控制台看到如下的输出。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>This works.
<span class="token punctuation">[</span>GIN-debug<span class="token punctuation">]</span> <span class="token punctuation">[</span>WARNING<span class="token punctuation">]</span> Creating an Engine instance with the Logger and Recovery middleware already attached.

<span class="token punctuation">[</span>GIN-debug<span class="token punctuation">]</span> <span class="token punctuation">[</span>WARNING<span class="token punctuation">]</span> Running <span class="token keyword">in</span> <span class="token string">&quot;debug&quot;</span> mode. Switch to <span class="token string">&quot;release&quot;</span> mode <span class="token keyword">in</span> production.
 - using env:   <span class="token builtin class-name">export</span> <span class="token assign-left variable">GIN_MODE</span><span class="token operator">=</span>release
 - using code:  gin.SetMode<span class="token punctuation">(</span>gin.ReleaseMode<span class="token punctuation">)</span>

<span class="token punctuation">[</span>GIN-debug<span class="token punctuation">]</span> GET    /hello                    --<span class="token operator">&gt;</span> main.main.func1 <span class="token punctuation">(</span><span class="token number">3</span> handlers<span class="token punctuation">)</span>
<span class="token punctuation">[</span>GIN-debug<span class="token punctuation">]</span> Environment variable PORT is undefined. Using port :8080 by default
<span class="token punctuation">[</span>GIN-debug<span class="token punctuation">]</span> Listening and serving HTTP on :8080
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,24),h={href:"http://localhost:8080/hello%EF%BC%8C%E5%B0%B1%E5%8F%AF%E4%BB%A5%E7%9C%8B%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E6%AD%A3%E5%B8%B8%E8%BF%94%E5%9B%9E%E3%80%82%E5%90%8C%E6%97%B6%EF%BC%8C%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%BF%99%E8%BE%B9%E4%B9%9F%E4%BC%9A%E6%89%93%E5%8D%B0%E7%9B%B8%E5%BA%94%E7%9A%84%E6%97%A5%E5%BF%97%E3%80%82",target:"_blank",rel:"noopener noreferrer"},w=e(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>GIN<span class="token punctuation">]</span> <span class="token number">2019</span>/06/08 - <span class="token number">17</span>:41:34 <span class="token operator">|</span> <span class="token number">200</span> <span class="token operator">|</span>     <span class="token number">214.213</span>µs <span class="token operator">|</span>             ::1 <span class="token operator">|</span> GET      /hello
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="构建路由" tabindex="-1"><a class="header-anchor" href="#构建路由" aria-hidden="true">#</a> 构建路由</h2><h3 id="新建路由模块" tabindex="-1"><a class="header-anchor" href="#新建路由模块" aria-hidden="true">#</a> 新建路由模块</h3><p>在根目录下新建router目录。在router下，新建router.go文件，代码如下。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> router

<span class="token keyword">import</span> <span class="token string">&quot;github.com/gin-gonic/gin&quot;</span>

<span class="token keyword">func</span> <span class="token function">InitRouter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span>gin<span class="token punctuation">.</span>Engine <span class="token punctuation">{</span>
	router <span class="token operator">:=</span> gin<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	apiVersionOne <span class="token operator">:=</span> router<span class="token punctuation">.</span><span class="token function">Group</span><span class="token punctuation">(</span><span class="token string">&quot;/api/v1/&quot;</span><span class="token punctuation">)</span>
	apiVersionOne<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		c<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> gin<span class="token punctuation">.</span>H<span class="token punctuation">{</span>
			<span class="token string">&quot;success&quot;</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
			<span class="token string">&quot;code&quot;</span><span class="token punctuation">:</span> <span class="token number">200</span><span class="token punctuation">,</span>
			<span class="token string">&quot;message&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;This works&quot;</span><span class="token punctuation">,</span>
			<span class="token string">&quot;data&quot;</span><span class="token punctuation">:</span> <span class="token boolean">nil</span><span class="token punctuation">,</span>
		<span class="token punctuation">}</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span>
	<span class="token keyword">return</span> router
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个文件中，导出了一个InitRouter函数，该函数返回gin.Engine类型。该函数还定义了一个路由为/api/v1/hello的GET请求。</p><h3 id="在main函数中引入路由" tabindex="-1"><a class="header-anchor" href="#在main函数中引入路由" aria-hidden="true">#</a> 在main函数中引入路由</h3><p>将main.go的代码改为如下。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">&quot;fmt&quot;</span>
	<span class="token string">&quot;github.com/detectiveHLH/go-backend-starter/router&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	r <span class="token operator">:=</span> router<span class="token punctuation">.</span><span class="token function">InitRouter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	r<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,9),f={href:"http://localhost:8080/api/v1/hello",target:"_blank",rel:"noopener noreferrer"},q=e(`<p>到此为止，我们已经拥有了一个拥有简单功能的Web服务器。那么问题来了，这样的一个开放的服务器，只要知道了地址，你的服务器就知道暴露给其他人了。这样会带来一些安全隐患。所以我们需要给接口加上鉴权，只有通过认证的调用方，才有权限调用服务器接口。所以接下来，我们需要引入JWT。</p><h2 id="引入jwt鉴权" tabindex="-1"><a class="header-anchor" href="#引入jwt鉴权" aria-hidden="true">#</a> 引入JWT鉴权</h2><p>使用go get命令安装jwt-go依赖。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>go get github.com/dgrijalva/jwt-go
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="新建jwt鉴权文件" tabindex="-1"><a class="header-anchor" href="#新建jwt鉴权文件" aria-hidden="true">#</a> 新建jwt鉴权文件</h3><p>在根目录下新建middleware/jwt目录，在jwt目录下新建jwt.go文件，代码如下。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> jwt

<span class="token keyword">import</span> <span class="token punctuation">(</span>
  <span class="token string">&quot;github.com/detectiveHLH/go-backend-starter/consts&quot;</span>
	<span class="token string">&quot;github.com/gin-gonic/gin&quot;</span>
	<span class="token string">&quot;net/http&quot;</span>
	<span class="token string">&quot;time&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">Jwt</span><span class="token punctuation">(</span><span class="token punctuation">)</span> gin<span class="token punctuation">.</span>HandlerFunc <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">var</span> code <span class="token builtin">int</span>
		<span class="token keyword">var</span> data <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span>

		code <span class="token operator">=</span> consts<span class="token punctuation">.</span>SUCCESS
		token <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span><span class="token string">&quot;token&quot;</span><span class="token punctuation">)</span>
		<span class="token keyword">if</span> token <span class="token operator">==</span> <span class="token string">&quot;&quot;</span> <span class="token punctuation">{</span>
			code <span class="token operator">=</span> consts<span class="token punctuation">.</span>INVALID_PARAMS
		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
			claims<span class="token punctuation">,</span> err <span class="token operator">:=</span> util<span class="token punctuation">.</span><span class="token function">ParseToken</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span>
			<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
				code <span class="token operator">=</span> consts<span class="token punctuation">.</span>ERROR_AUTH_CHECK_TOKEN_FAIL
			<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Unix</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> claims<span class="token punctuation">.</span>ExpiresAt <span class="token punctuation">{</span>
				code <span class="token operator">=</span> consts<span class="token punctuation">.</span>ERROR_AUTH_CHECK_TOKEN_TIMEOUT
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>

		<span class="token keyword">if</span> code <span class="token operator">!=</span> consts<span class="token punctuation">.</span>SUCCESS <span class="token punctuation">{</span>
			c<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>StatusUnauthorized<span class="token punctuation">,</span> gin<span class="token punctuation">.</span>H<span class="token punctuation">{</span>
				<span class="token string">&quot;code&quot;</span><span class="token punctuation">:</span> code<span class="token punctuation">,</span>
				<span class="token string">&quot;msg&quot;</span><span class="token punctuation">:</span>  consts<span class="token punctuation">.</span><span class="token function">GetMsg</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">,</span>
				<span class="token string">&quot;data&quot;</span><span class="token punctuation">:</span> data<span class="token punctuation">,</span>
			<span class="token punctuation">}</span><span class="token punctuation">)</span>

			c<span class="token punctuation">.</span><span class="token function">Abort</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
			<span class="token keyword">return</span>
		<span class="token punctuation">}</span>

		c<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="引入常量" tabindex="-1"><a class="header-anchor" href="#引入常量" aria-hidden="true">#</a> 引入常量</h3><p>此时，代码中会有错误，是因为我们没有声明consts这个包，其中的变量SUCCESS、INVALID_PARAMS和ERROR_AUTH_CHECK_TOKEN_FAIL是未定义的。根据code获取服务器返回信息的函数GetMsg也没定义。同样没有定义的还有util.ParseToken(token)和claims.ExpiresAt。所以我们要新建consts包。我们在根目录下新建consts目录，并且在consts目录下新建code.go，将定义好的一些常量引进去，代码如下。</p><h4 id="新建const文件" tabindex="-1"><a class="header-anchor" href="#新建const文件" aria-hidden="true">#</a> 新建const文件</h4><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">const</span> <span class="token punctuation">(</span>
	SUCCESS        <span class="token operator">=</span> <span class="token number">200</span>
	ERROR          <span class="token operator">=</span> <span class="token number">500</span>
	INVALID_PARAMS <span class="token operator">=</span> <span class="token number">400</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="新建message文件" tabindex="-1"><a class="header-anchor" href="#新建message文件" aria-hidden="true">#</a> 新建message文件</h4><p>再新建message.go文件，代码如下。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">var</span> MsgFlags <span class="token operator">=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span>
	SUCCESS<span class="token punctuation">:</span>                         <span class="token string">&quot;ok&quot;</span><span class="token punctuation">,</span>
	ERROR<span class="token punctuation">:</span>                           <span class="token string">&quot;fail&quot;</span><span class="token punctuation">,</span>
	INVALID_PARAMS<span class="token punctuation">:</span>                  <span class="token string">&quot;请求参数错误&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">GetMsg</span><span class="token punctuation">(</span>code <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
	msg<span class="token punctuation">,</span> ok <span class="token operator">:=</span> MsgFlags<span class="token punctuation">[</span>code<span class="token punctuation">]</span>
	<span class="token keyword">if</span> ok <span class="token punctuation">{</span>
		<span class="token keyword">return</span> msg
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> MsgFlags<span class="token punctuation">[</span>ERROR<span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="新建util" tabindex="-1"><a class="header-anchor" href="#新建util" aria-hidden="true">#</a> 新建util</h4><p>在根目录下新建util，并且在util下新建jwt.go，代码如下。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> util

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">&quot;github.com/dgrijalva/jwt-go&quot;</span>
	<span class="token string">&quot;time&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">var</span> jwtSecret <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>setting<span class="token punctuation">.</span>AppSetting<span class="token punctuation">.</span>JwtSecret<span class="token punctuation">)</span>

<span class="token keyword">type</span> Claims <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	Username <span class="token builtin">string</span> <span class="token string">\`json:&quot;username&quot;\`</span>
	Password <span class="token builtin">string</span> <span class="token string">\`json:&quot;password&quot;\`</span>
	jwt<span class="token punctuation">.</span>StandardClaims
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">GenerateToken</span><span class="token punctuation">(</span>username<span class="token punctuation">,</span> password <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	nowTime <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	expireTime <span class="token operator">:=</span> nowTime<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Hour<span class="token punctuation">)</span>
	claims <span class="token operator">:=</span> Claims<span class="token punctuation">{</span>
		username<span class="token punctuation">,</span>
		password<span class="token punctuation">,</span>
		jwt<span class="token punctuation">.</span>StandardClaims <span class="token punctuation">{</span>
			ExpiresAt <span class="token punctuation">:</span> expireTime<span class="token punctuation">.</span><span class="token function">Unix</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
			Issuer <span class="token punctuation">:</span> <span class="token string">&quot;go-backend-starter&quot;</span><span class="token punctuation">,</span>
		<span class="token punctuation">}</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span>
	tokenClaims <span class="token operator">:=</span> jwt<span class="token punctuation">.</span><span class="token function">NewWithClaims</span><span class="token punctuation">(</span>jwt<span class="token punctuation">.</span>SigningMethodHS256<span class="token punctuation">,</span> claims<span class="token punctuation">)</span>
	token<span class="token punctuation">,</span> err <span class="token operator">:=</span> tokenClaims<span class="token punctuation">.</span><span class="token function">SignedString</span><span class="token punctuation">(</span>jwtSecret<span class="token punctuation">)</span>

	<span class="token keyword">return</span> token<span class="token punctuation">,</span> err
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">ParseToken</span><span class="token punctuation">(</span>token <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>Claims<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	tokenClaims<span class="token punctuation">,</span> err <span class="token operator">:=</span> jwt<span class="token punctuation">.</span><span class="token function">ParseWithClaims</span><span class="token punctuation">(</span>token<span class="token punctuation">,</span> <span class="token operator">&amp;</span>Claims<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>token <span class="token operator">*</span>jwt<span class="token punctuation">.</span>Token<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> jwtSecret<span class="token punctuation">,</span> <span class="token boolean">nil</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> tokenClaims <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> claims<span class="token punctuation">,</span> ok <span class="token operator">:=</span> tokenClaims<span class="token punctuation">.</span>Claims<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token operator">*</span>Claims<span class="token punctuation">)</span><span class="token punctuation">;</span> ok <span class="token operator">&amp;&amp;</span> tokenClaims<span class="token punctuation">.</span>Valid <span class="token punctuation">{</span>
			<span class="token keyword">return</span> claims<span class="token punctuation">,</span> <span class="token boolean">nil</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="新建setting包" tabindex="-1"><a class="header-anchor" href="#新建setting包" aria-hidden="true">#</a> 新建setting包</h4><p>在上面的util中，setting包并没有定义，所以在这个步骤中我们需要定义setting包。</p><p>使用go get命令安装依赖。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>go get gopkg.in/ini.v1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在项目根目录下新建setting目录，并在setting目录下新建setting.go文件，代码如下。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> setting

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">&quot;gopkg.in/ini.v1&quot;</span>
	<span class="token string">&quot;log&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">type</span> App <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	JwtSecret <span class="token builtin">string</span>
<span class="token punctuation">}</span>
<span class="token keyword">type</span> Server <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	Ip   <span class="token builtin">string</span>
	Port <span class="token builtin">string</span>
<span class="token punctuation">}</span>
<span class="token keyword">type</span> Database <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	Type        <span class="token builtin">string</span>
	User        <span class="token builtin">string</span>
	Password    <span class="token builtin">string</span>
	Host        <span class="token builtin">string</span>
	Name        <span class="token builtin">string</span>
	TablePrefix <span class="token builtin">string</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> AppSetting <span class="token operator">=</span> <span class="token operator">&amp;</span>App<span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">var</span> ServerSetting <span class="token operator">=</span> <span class="token operator">&amp;</span>Server<span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">var</span> DatabaseSetting <span class="token operator">=</span> <span class="token operator">&amp;</span>Database<span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">var</span> config <span class="token operator">*</span>ini<span class="token punctuation">.</span>File

<span class="token keyword">func</span> <span class="token function">Setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">var</span> err <span class="token builtin">error</span>
	config<span class="token punctuation">,</span> err <span class="token operator">=</span> ini<span class="token punctuation">.</span><span class="token function">Load</span><span class="token punctuation">(</span><span class="token string">&quot;config/app.ini&quot;</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span><span class="token string">&quot;Fail to parse &#39;config/app.ini&#39;: %v&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token function">mapTo</span><span class="token punctuation">(</span><span class="token string">&quot;app&quot;</span><span class="token punctuation">,</span> AppSetting<span class="token punctuation">)</span>
	<span class="token function">mapTo</span><span class="token punctuation">(</span><span class="token string">&quot;server&quot;</span><span class="token punctuation">,</span> ServerSetting<span class="token punctuation">)</span>
	<span class="token function">mapTo</span><span class="token punctuation">(</span><span class="token string">&quot;database&quot;</span><span class="token punctuation">,</span> DatabaseSetting<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">mapTo</span><span class="token punctuation">(</span>section <span class="token builtin">string</span><span class="token punctuation">,</span> v <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	err <span class="token operator">:=</span> config<span class="token punctuation">.</span><span class="token function">Section</span><span class="token punctuation">(</span>section<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">MapTo</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		log<span class="token punctuation">.</span><span class="token function">Fatalf</span><span class="token punctuation">(</span><span class="token string">&quot;Cfg.MapTo RedisSetting err: %v&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="新建配置文件" tabindex="-1"><a class="header-anchor" href="#新建配置文件" aria-hidden="true">#</a> 新建配置文件</h4><p>在项目根目录下新建config目录，并新建app.ini文件，内容如下。</p><div class="language-ini line-numbers-mode" data-ext="ini"><pre class="language-ini"><code><span class="token section"><span class="token punctuation">[</span><span class="token section-name selector">app</span><span class="token punctuation">]</span></span>
<span class="token key attr-name">JwtSecret</span> <span class="token punctuation">=</span> <span class="token value attr-value">233</span>
<span class="token section"><span class="token punctuation">[</span><span class="token section-name selector">server</span><span class="token punctuation">]</span></span>
Ip : localhost
Port : 8000
Url : 127.0.0.1:27017
<span class="token section"><span class="token punctuation">[</span><span class="token section-name selector">database</span><span class="token punctuation">]</span></span>
<span class="token key attr-name">Type</span> <span class="token punctuation">=</span> <span class="token value attr-value">mysql</span>
<span class="token key attr-name">User</span> <span class="token punctuation">=</span> <span class="token value attr-value">$YOUR_USERNAME</span>
<span class="token key attr-name">Password</span> <span class="token punctuation">=</span> <span class="token value attr-value">$YOUR_PASSWORD</span>
<span class="token key attr-name">Host</span> <span class="token punctuation">=</span> <span class="token value attr-value">127.0.0.1:3306</span>
<span class="token key attr-name">Name</span> <span class="token punctuation">=</span> <span class="token value attr-value">golang_test</span>
<span class="token key attr-name">TablePrefix</span> <span class="token punctuation">=</span> <span class="token value attr-value">golang_test_</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="实现登录接口" tabindex="-1"><a class="header-anchor" href="#实现登录接口" aria-hidden="true">#</a> 实现登录接口</h3><h4 id="新增登录接口" tabindex="-1"><a class="header-anchor" href="#新增登录接口" aria-hidden="true">#</a> 新增登录接口</h4><p>到此为止，通过jwt token进行鉴权的逻辑已经全部完成，剩下的就需要实现登录接口来将token在用户登录成功之后返回给用户。</p><p>使用go get命令安装依赖。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>go get github.com/astaxie/beego/validation
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在router下新建login.go，代码如下。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> router

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">&quot;github.com/astaxie/beego/validation&quot;</span>
	<span class="token string">&quot;github.com/detectiveHLH/go-backend-starter/consts&quot;</span>
	<span class="token string">&quot;github.com/detectiveHLH/go-backend-starter/util&quot;</span>
	<span class="token string">&quot;github.com/gin-gonic/gin&quot;</span>
	<span class="token string">&quot;net/http&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">type</span> auth <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	Username <span class="token builtin">string</span> <span class="token string">\`valid:&quot;Required; MaxSize(50)&quot;\`</span>
	Password <span class="token builtin">string</span> <span class="token string">\`valid:&quot;Required; MaxSize(50)&quot;\`</span>
<span class="token punctuation">}</span>


<span class="token keyword">func</span> <span class="token function">Login</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	appG <span class="token operator">:=</span> util<span class="token punctuation">.</span>Gin<span class="token punctuation">{</span>C<span class="token punctuation">:</span> c<span class="token punctuation">}</span>
	valid <span class="token operator">:=</span> validation<span class="token punctuation">.</span>Validation<span class="token punctuation">{</span><span class="token punctuation">}</span>
	username <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span><span class="token string">&quot;username&quot;</span><span class="token punctuation">)</span>
	password <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span><span class="token string">&quot;password&quot;</span><span class="token punctuation">)</span>

	a <span class="token operator">:=</span> auth<span class="token punctuation">{</span>Username<span class="token punctuation">:</span> username<span class="token punctuation">,</span> Password<span class="token punctuation">:</span> password<span class="token punctuation">}</span>
	ok<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> valid<span class="token punctuation">.</span><span class="token function">Valid</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>a<span class="token punctuation">)</span>
	<span class="token keyword">if</span> <span class="token operator">!</span>ok <span class="token punctuation">{</span>
		appG<span class="token punctuation">.</span><span class="token function">Response</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>StatusOK<span class="token punctuation">,</span> consts<span class="token punctuation">.</span>INVALID_PARAMS<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span>
		<span class="token keyword">return</span>
	<span class="token punctuation">}</span>

	authService <span class="token operator">:=</span> authentication<span class="token punctuation">.</span>Auth<span class="token punctuation">{</span>Username<span class="token punctuation">:</span> username<span class="token punctuation">,</span> Password<span class="token punctuation">:</span> password<span class="token punctuation">}</span>
	isExist<span class="token punctuation">,</span> err <span class="token operator">:=</span> authService<span class="token punctuation">.</span><span class="token function">Check</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		appG<span class="token punctuation">.</span><span class="token function">Response</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>StatusOK<span class="token punctuation">,</span> consts<span class="token punctuation">.</span>ERROR_AUTH_CHECK_TOKEN_FAIL<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span>
		<span class="token keyword">return</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">if</span> <span class="token operator">!</span>isExist <span class="token punctuation">{</span>
		appG<span class="token punctuation">.</span><span class="token function">Response</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>StatusOK<span class="token punctuation">,</span> consts<span class="token punctuation">.</span>ERROR_AUTH<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span>
		<span class="token keyword">return</span>
	<span class="token punctuation">}</span>

	token<span class="token punctuation">,</span> err <span class="token operator">:=</span> util<span class="token punctuation">.</span><span class="token function">GenerateToken</span><span class="token punctuation">(</span>username<span class="token punctuation">,</span> password<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		appG<span class="token punctuation">.</span><span class="token function">Response</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>StatusOK<span class="token punctuation">,</span> consts<span class="token punctuation">.</span>ERROR_AUTH_TOKEN<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span>
		<span class="token keyword">return</span>
	<span class="token punctuation">}</span>

	appG<span class="token punctuation">.</span><span class="token function">Response</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>StatusOK<span class="token punctuation">,</span> consts<span class="token punctuation">.</span>SUCCESS<span class="token punctuation">,</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span>
		<span class="token string">&quot;token&quot;</span><span class="token punctuation">:</span> token<span class="token punctuation">,</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="新增返回类" tabindex="-1"><a class="header-anchor" href="#新增返回类" aria-hidden="true">#</a> 新增返回类</h4><p>在util包下新增response.go文件，代码如下。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> util

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">&quot;github.com/detectiveHLH/go-backend-starter/consts&quot;</span>
	<span class="token string">&quot;github.com/gin-gonic/gin&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">type</span> Gin <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	C <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>g <span class="token operator">*</span>Gin<span class="token punctuation">)</span> <span class="token function">Response</span><span class="token punctuation">(</span>httpCode<span class="token punctuation">,</span> errCode <span class="token builtin">int</span><span class="token punctuation">,</span> data <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	g<span class="token punctuation">.</span>C<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span>httpCode<span class="token punctuation">,</span> gin<span class="token punctuation">.</span>H<span class="token punctuation">{</span>
		<span class="token string">&quot;code&quot;</span><span class="token punctuation">:</span> httpCode<span class="token punctuation">,</span>
		<span class="token string">&quot;msg&quot;</span><span class="token punctuation">:</span>  consts<span class="token punctuation">.</span><span class="token function">GetMsg</span><span class="token punctuation">(</span>errCode<span class="token punctuation">)</span><span class="token punctuation">,</span>
		<span class="token string">&quot;data&quot;</span><span class="token punctuation">:</span> data<span class="token punctuation">,</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span>

	<span class="token keyword">return</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="新增鉴权逻辑" tabindex="-1"><a class="header-anchor" href="#新增鉴权逻辑" aria-hidden="true">#</a> 新增鉴权逻辑</h4><p>除了返回类，login.go中还有关键的鉴权逻辑还没有实现。在根目录下新建service/authentication目录，在该目录下新建auth.go文件，代码如下。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> authentication

<span class="token keyword">import</span> <span class="token string">&quot;fmt&quot;</span>

<span class="token keyword">type</span> Auth <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	Username <span class="token builtin">string</span>
	Password <span class="token builtin">string</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>a <span class="token operator">*</span>Auth<span class="token punctuation">)</span> <span class="token function">Check</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">bool</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	userName <span class="token operator">:=</span> a<span class="token punctuation">.</span>Username
	passWord <span class="token operator">:=</span> a<span class="token punctuation">.</span>Password
  <span class="token comment">// todo：实现自己的鉴权逻辑</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>userName<span class="token punctuation">,</span> passWord<span class="token punctuation">)</span>
	<span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在此处，需要自己真正的根据业务去实现对用户调用接口的合法性校验。例如，可以根据用户的用户名和密码去数据库做验证。</p><h3 id="修改router-go" tabindex="-1"><a class="header-anchor" href="#修改router-go" aria-hidden="true">#</a> 修改router.go</h3><p>修改router.go中的代码如下。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> router

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">&quot;github.com/detectiveHLH/go-backend-starter/middleware/jwt&quot;</span>
	<span class="token string">&quot;github.com/gin-gonic/gin&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">InitRouter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span>gin<span class="token punctuation">.</span>Engine <span class="token punctuation">{</span>
	router <span class="token operator">:=</span> gin<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	router<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">&quot;/login&quot;</span><span class="token punctuation">,</span> Login<span class="token punctuation">)</span>
	apiVersionOne <span class="token operator">:=</span> router<span class="token punctuation">.</span><span class="token function">Group</span><span class="token punctuation">(</span><span class="token string">&quot;/api/v1/&quot;</span><span class="token punctuation">)</span>
  
	apiVersionOne<span class="token punctuation">.</span><span class="token function">Use</span><span class="token punctuation">(</span>jwt<span class="token punctuation">.</span><span class="token function">Jwt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  
	apiVersionOne<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		c<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> gin<span class="token punctuation">.</span>H<span class="token punctuation">{</span>
			<span class="token string">&quot;success&quot;</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
			<span class="token string">&quot;code&quot;</span><span class="token punctuation">:</span> <span class="token number">200</span><span class="token punctuation">,</span>
			<span class="token string">&quot;message&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;This works&quot;</span><span class="token punctuation">,</span>
			<span class="token string">&quot;data&quot;</span><span class="token punctuation">:</span> <span class="token boolean">nil</span><span class="token punctuation">,</span>
		<span class="token punctuation">}</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span>
	<span class="token keyword">return</span> router
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，我们在路由文件中加入了/login接口，并使用了我们自定义的jwt鉴权的中间件。只要是在v1下的路由，请求之前都会先进入jwt中进行鉴权，鉴权通过之后才能继续往下执行。</p><h3 id="运行main-go-1" tabindex="-1"><a class="header-anchor" href="#运行main-go-1" aria-hidden="true">#</a> 运行main.go</h3>`,45),y=n("code",null,"go run main.go",-1),x={href:"http://localhost:8080/api/v1/hello",target:"_blank",rel:"noopener noreferrer"},_=e(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token punctuation">{</span>
    <span class="token string">&quot;code&quot;</span><span class="token punctuation">:</span> <span class="token number">400</span><span class="token punctuation">,</span>
    <span class="token string">&quot;data&quot;</span><span class="token punctuation">:</span> null<span class="token punctuation">,</span>
    <span class="token string">&quot;msg&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;请求参数错误&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这是因为我们加入了鉴权，凡是需要鉴权的接口，都需要带上参数token。而要获取token则必须要先要登录，假设我们的用户名是Tom，密码是123。以此来调用登录接口。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>http://localhost:8080/login?username<span class="token operator">=</span>Tom<span class="token operator">&amp;</span><span class="token assign-left variable">password</span><span class="token operator">=</span><span class="token number">123</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在浏览器中访问如上的url之后，可以看到返回如下。</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
    <span class="token property">&quot;code&quot;</span><span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">,</span>
    <span class="token property">&quot;data&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">&quot;token&quot;</span><span class="token operator">:</span> <span class="token string">&quot;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6IlRvbSIsInBhc3N3b3JkIjoiMTIzIiwiZXhwIjoxNTYwMTM5MTE3LCJpc3MiOiJnby1iYWNrZW5kLXN0YXJ0ZXIifQ.I-RSi-xVV1Tk_2iBWolF1u94Y7oVBQXnHh6OI2YKJ6U&quot;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token property">&quot;msg&quot;</span><span class="token operator">:</span> <span class="token string">&quot;ok&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>有了token之后，我们再调用hello接口，可以看到数据正常的返回了。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>http://localhost:8080/api/v1/hello?token<span class="token operator">=</span>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6IlRvbSIsInBhc3N3b3JkIjoiMTIzIiwiZXhwIjoxNTYwMTM5MTE3LCJpc3MiOiJnby1iYWNrZW5kLXN0YXJ0ZXIifQ.I-RSi-xVV1Tk_2iBWolF1u94Y7oVBQXnHh6OI2YKJ6U
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>一般的处理方法是，前端拿到这个token，利用持久化存储存下来，然后之后的每次请求都将token写在header中发给后端。后端先通过header中的token来校验调用接口的合法性，验证通过之后才进行真正的接口调用。</p><p>而在这我将token写在了request param中，只是为了做一个例子来展示。</p><h2 id="引入swagger" tabindex="-1"><a class="header-anchor" href="#引入swagger" aria-hidden="true">#</a> 引入swagger</h2><p>完成了基本的框架之后，我们就开始为接口引入swagger文档。写过java的同学应该对swagger不陌生。往常写API文档，都是手写。即每个接口的每一个参数，都需要手打。</p>`,11),E={href:"https://github.com/swaggo/gin-swagger",target:"_blank",rel:"noopener noreferrer"},S=e(`<h3 id="安装依赖" tabindex="-1"><a class="header-anchor" href="#安装依赖" aria-hidden="true">#</a> 安装依赖</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>go get github.com/swaggo/gin-swagger
go get <span class="token parameter variable">-u</span> github.com/swaggo/gin-swagger/swaggerFiles
go get <span class="token parameter variable">-u</span> github.com/swaggo/swag/cmd/swag
go get github.com/ugorji/go/codec
go get github.com/alecthomas/template
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="在router中注入swagger" tabindex="-1"><a class="header-anchor" href="#在router中注入swagger" aria-hidden="true">#</a> 在router中注入swagger</h3><p>引入依赖之后，我们需要在router/router.go中注入swagger。在import中加入<code>_ &quot;github.com/detectiveHLH/go-backend-starter/docs&quot;</code>。</p><p>并在<code>router := gin.New()</code>之后加入如下代码。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>router<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">&quot;/swagger/*any&quot;</span><span class="token punctuation">,</span> ginSwagger<span class="token punctuation">.</span><span class="token function">WrapHandler</span><span class="token punctuation">(</span>swaggerFiles<span class="token punctuation">.</span>Handler<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="为接口编写swagger注释" tabindex="-1"><a class="header-anchor" href="#为接口编写swagger注释" aria-hidden="true">#</a> 为接口编写swagger注释</h3><p>在router/login.go中的Login函数上方加上如下注释。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// @Summary 登录</span>
<span class="token comment">// @Produce  json</span>
<span class="token comment">// @Param username query string true &quot;username&quot;</span>
<span class="token comment">// @Param password query string true &quot;password&quot;</span>
<span class="token comment">// @Success 200 {string} json &quot;{&quot;code&quot;:200,&quot;data&quot;:{},&quot;msg&quot;:&quot;ok&quot;}&quot;</span>
<span class="token comment">// @Router /login [get]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="初始化swagger" tabindex="-1"><a class="header-anchor" href="#初始化swagger" aria-hidden="true">#</a> 初始化swagger</h3><p>在项目根目录下使用<code>swag init</code>命令来初始化swagger文档。该命令将会在项目根目录生成docs目，内容如下。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>.
├── docs.go
├── swagger.json
└── swagger.yaml
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="查看swagger文档" tabindex="-1"><a class="header-anchor" href="#查看swagger文档" aria-hidden="true">#</a> 查看swagger文档</h3>`,13),T={href:"http://localhost:8080/swagger/index.html",target:"_blank",rel:"noopener noreferrer"},I=e(`<h2 id="引入endless" tabindex="-1"><a class="header-anchor" href="#引入endless" aria-hidden="true">#</a> 引入Endless</h2><h3 id="安装endless" tabindex="-1"><a class="header-anchor" href="#安装endless" aria-hidden="true">#</a> 安装Endless</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>go get github.com/fvbock/endless
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="修改main-go-1" tabindex="-1"><a class="header-anchor" href="#修改main-go-1" aria-hidden="true">#</a> 修改main.go</h3><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">&quot;fmt&quot;</span>
	<span class="token string">&quot;github.com/detectiveHLH/go-backend-starter/router&quot;</span>
	<span class="token string">&quot;github.com/fvbock/endless&quot;</span>
	<span class="token string">&quot;log&quot;</span>
	<span class="token string">&quot;syscall&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	r <span class="token operator">:=</span> router<span class="token punctuation">.</span><span class="token function">InitRouter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

  address <span class="token operator">:=</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">&quot;%s:%s&quot;</span><span class="token punctuation">,</span> setting<span class="token punctuation">.</span>ServerSetting<span class="token punctuation">.</span>Ip<span class="token punctuation">,</span> setting<span class="token punctuation">.</span>ServerSetting<span class="token punctuation">.</span>Port<span class="token punctuation">)</span>
	server <span class="token operator">:=</span> endless<span class="token punctuation">.</span><span class="token function">NewServer</span><span class="token punctuation">(</span>address<span class="token punctuation">,</span> r<span class="token punctuation">)</span>
	server<span class="token punctuation">.</span>BeforeBegin <span class="token operator">=</span> <span class="token keyword">func</span><span class="token punctuation">(</span>add <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		log<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;Actual pid is %d&quot;</span><span class="token punctuation">,</span> syscall<span class="token punctuation">.</span><span class="token function">Getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>

  err <span class="token operator">:=</span> server<span class="token punctuation">.</span><span class="token function">ListenAndServe</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		log<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;Server err: %v&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="写在后面" tabindex="-1"><a class="header-anchor" href="#写在后面" aria-hidden="true">#</a> 写在后面</h2><p>对比起没有go module的依赖管理，现在的go module更像是Node.js中的package.json，也像是Java中的pom.xml，唯一不同的是pom.xml需要手动更新。</p><p>当我们拿到有go module项目的时候，不用担心下来依赖时，因为版本问题可能导致的一些兼容问题。直接使用go mod中的命令就可以将制定了版本的依赖全部安装，其效果类似于Node.js中的<code>npm install</code>。</p><p>go module定位module的方式，与Node.js寻找依赖的逻辑一样，Node会从当前命令执行的目录开始，依次向上查找node_modules中是否有这个依赖，直到找到。go则是依次向上查找go.mod文件，来定位一个模块。</p><p>相信之后go之后的依赖管理，会越来越好。</p><p>Happy hacking.</p>`,11),C=n("p",null,"参考：",-1),A={href:"https://www.cnblogs.com/apocelipes/p/10295096.html",target:"_blank",rel:"noopener noreferrer"},G={href:"https://github.com/EDDYCJY/go-gin-example",target:"_blank",rel:"noopener noreferrer"},H={href:"https://www.cnblogs.com/CraryPrimitiveMan/p/8560839.html",target:"_blank",rel:"noopener noreferrer"},N=n("p",null,"往期文章：",-1),R={href:"https://www.hulunhao.com/java/add-jwt-in-spring-boot/",target:"_blank",rel:"noopener noreferrer"},j={href:"https://www.hulunhao.com/java/newSprintBootStarter/",target:"_blank",rel:"noopener noreferrer"},O=n("p",null,"相关：",-1),M={href:"https://www.hulunhao.com/",target:"_blank",rel:"noopener noreferrer"},P=n("li",null,"微信公众号： SH的全栈笔记（或直接在添加公众号界面搜索微信号LunhaoHu）",-1);function U(J,B){const a=o("ExternalLinkIcon");return c(),i("div",null,[u,r,n("p",null,[s("源码在此处："),n("a",d,[s("项目源码"),t(a)])]),k,n("p",null,[s("推荐使用"),n("a",v,[s("GoLand"),t(a)])]),m,n("p",null,[n("a",g,[s("Gin"),t(a)]),s("是一个用Go实现的HTTP Web框架，我们使用Gin来作为starter的Base Framework。")]),b,n("p",null,[s("此时，服务器已经在8080端口启动了。然后在浏览器中访问"),n("a",h,[s("http://localhost:8080/hello，就可以看到服务器的正常返回。同时，服务器这边也会打印相应的日志。"),t(a)])]),w,n("p",null,[s("然后运行main.go，启动之后，访问"),n("a",f,[s("http://localhost:8080/api/v1/hello"),t(a)]),s("，可以看到，与之前访问/hello路由的结果是一样的。")]),q,n("p",null,[s("到此，我们使用"),y,s("启动服务器，访问"),n("a",x,[s("http://localhost:8080/api/v1/hello"),t(a)]),s("会遇到如下错误。")]),_,n("p",null,[s("而swagger不一样，swagger只需要你在接口上打上几个注解（Java中的操作），就可以自动为你生成swagger文档。而在go中，我们是通过注释的方式来实现的，接下来我们安装"),n("a",E,[s("gin-swagger"),t(a)]),s("。")]),S,n("p",null,[s("运行main.go，然后在浏览器访问"),n("a",T,[s("http://localhost:8080/swagger/index.html"),t(a)]),s("就可以看到swagger根据注释自动生成的API文档了。")]),I,n("blockquote",null,[C,n("ul",null,[n("li",null,[n("a",A,[s("再探go modules：使用与细节"),t(a)])]),n("li",null,[n("a",G,[s("go-gin-example"),t(a)])]),n("li",null,[n("a",H,[s("平滑重启"),t(a)])])]),N,n("ul",null,[n("li",null,[n("a",R,[s("如何在SpringBoot中集成JWT(JSON Web Token)鉴权"),t(a)])]),n("li",null,[n("a",j,[s("手把手教你从零开始搭建SpringBoot后端项目框架"),t(a)])])]),O,n("ul",null,[n("li",null,[s("个人网站： "),n("a",M,[s("Lunhao Hu"),t(a)])]),P])])])}const F=p(l,[["render",U],["__file","230858.html.vue"]]);export{F as default};
