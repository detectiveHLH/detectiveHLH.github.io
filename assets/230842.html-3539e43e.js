const n=JSON.parse('{"key":"v-53089edd","path":"/posts/230842.html","title":"初探Java类型擦除","lang":"zh-CN","frontmatter":{"date":"2019-05-27T00:00:00.000Z","permalink":"/posts/230842.html","category":["Java"],"tag":["泛型"],"description":"初探Java类型擦除 什么是类型擦除 为了让你们快速的对类型擦除有一个印象，首先举一个很简单也很经典的例子。 // 指定泛型为String List&lt;String&gt; list1 = new ArrayList&lt;&gt;(); // 指定泛型为Integer List&lt;Integer&gt; list2 = new ArrayList&lt;&gt;(); System.out.println(list1.getClass() == list2.getClass()); // true","head":[["meta",{"property":"og:url","content":"https://leonsh.cn/posts/230842.html"}],["meta",{"property":"og:site_name","content":"SH的全栈笔记"}],["meta",{"property":"og:title","content":"初探Java类型擦除"}],["meta",{"property":"og:description","content":"初探Java类型擦除 什么是类型擦除 为了让你们快速的对类型擦除有一个印象，首先举一个很简单也很经典的例子。 // 指定泛型为String List&lt;String&gt; list1 = new ArrayList&lt;&gt;(); // 指定泛型为Integer List&lt;Integer&gt; list2 = new ArrayList&lt;&gt;(); System.out.println(list1.getClass() == list2.getClass()); // true"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-01-09T11:45:29.000Z"}],["meta",{"property":"article:author","content":"LeonSH"}],["meta",{"property":"article:tag","content":"泛型"}],["meta",{"property":"article:published_time","content":"2019-05-27T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-01-09T11:45:29.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"初探Java类型擦除\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2019-05-27T00:00:00.000Z\\",\\"dateModified\\":\\"2024-01-09T11:45:29.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LeonSH\\",\\"url\\":\\"https://leonsh.cn\\"}]}"]]},"headers":[{"level":2,"title":"什么是类型擦除","slug":"什么是类型擦除","link":"#什么是类型擦除","children":[]},{"level":2,"title":"泛型","slug":"泛型","link":"#泛型","children":[{"level":3,"title":"泛型的定义","slug":"泛型的定义","link":"#泛型的定义","children":[]}]},{"level":2,"title":"泛型的使用方法","slug":"泛型的使用方法","link":"#泛型的使用方法","children":[{"level":3,"title":"泛型类","slug":"泛型类","link":"#泛型类","children":[]},{"level":3,"title":"泛型方法","slug":"泛型方法","link":"#泛型方法","children":[]},{"level":3,"title":"泛型接口","slug":"泛型接口","link":"#泛型接口","children":[]}]},{"level":2,"title":"泛型通配符","slug":"泛型通配符","link":"#泛型通配符","children":[{"level":3,"title":"泛型的继承问题","slug":"泛型的继承问题","link":"#泛型的继承问题","children":[]},{"level":3,"title":"通配符的应用场景","slug":"通配符的应用场景","link":"#通配符的应用场景","children":[]},{"level":3,"title":"无界通配符","slug":"无界通配符","link":"#无界通配符","children":[]},{"level":3,"title":"上界通配符<? extends T>","slug":"上界通配符-extends-t","link":"#上界通配符-extends-t","children":[]},{"level":3,"title":"下界通配符<? super Animal>","slug":"下界通配符-super-animal","link":"#下界通配符-super-animal","children":[]}]},{"level":2,"title":"类型擦除","slug":"类型擦除","link":"#类型擦除","children":[]},{"level":2,"title":"写在最后","slug":"写在最后","link":"#写在最后","children":[]}],"git":{"createdTime":1704800729000,"updatedTime":1704800729000,"contributors":[{"name":"leonsh","email":"detectivehlh@qq.com","commits":1}]},"readingTime":{"minutes":9.33,"words":2798},"filePathRelative":"posts/Java/初探Java类型擦除.md","localizedDate":"2019年5月27日","excerpt":"<h1> 初探Java类型擦除</h1>\\n<h2> 什么是类型擦除</h2>\\n<p>为了让你们快速的对类型擦除有一个印象，首先举一个很简单也很经典的例子。</p>\\n<div class=\\"language-java line-numbers-mode\\" data-ext=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token comment\\">// 指定泛型为String</span>\\n<span class=\\"token class-name\\">List</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">String</span><span class=\\"token punctuation\\">&gt;</span></span> list1 <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">ArrayList</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token punctuation\\">&gt;</span></span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token comment\\">// 指定泛型为Integer</span>\\n<span class=\\"token class-name\\">List</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">Integer</span><span class=\\"token punctuation\\">&gt;</span></span> list2 <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">ArrayList</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token punctuation\\">&gt;</span></span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token class-name\\">System</span><span class=\\"token punctuation\\">.</span>out<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">println</span><span class=\\"token punctuation\\">(</span>list1<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getClass</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">==</span> list2<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getClass</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// true</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","copyright":{"author":"LeonSH"},"autoDesc":true}');export{n as data};
