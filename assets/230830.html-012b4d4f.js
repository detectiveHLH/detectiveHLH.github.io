import{_ as r}from"./plugin-vue_export-helper-c27b6911.js";import{r as i,o as a,c as g,a as o,b as e,d as n,f as c}from"./app-f49d5c61.js";const p="/images/230830/ping-google.jpeg",d="/images/230830/dont-know-ip-address.jpeg",s="/images/230830/dns-config.jpeg",l="/images/230830/dns-return-ip-address.jpeg",h="/images/230830/dns-layer.jpeg",m="/images/230830/the-whole-query-process.jpeg",f="/images/230830/dig-command.jpeg",_="/images/230830/dig-example.jpeg",u="/images/230830/cache-strategy.jpeg",w={},N=o("h1",{id:"你的域名是如何变成-ip-地址的",tabindex:"-1"},[o("a",{class:"header-anchor",href:"#你的域名是如何变成-ip-地址的","aria-hidden":"true"},"#"),e(" 你的域名是如何变成 IP 地址的？")],-1),S=o("p",null,"可能大家都知道或者被问过一个问题，那就是很经典的「从浏览器输入 URL 再到页面展示，都发生了什么」。这个问题虽然简单，但是真的能够从回答的各种细节上看出不同人之间的水平差距。",-1),D=o("p",null,[e("这篇文章主要是聊一聊输入 URL 之后的第一步——"),o("strong",null,"域名解析")],-1),b={href:"http://www.google.com",target:"_blank",rel:"noopener noreferrer"},I=o("code",null,"ping",-1),x=c('<figure><img src="'+p+'" alt="" width="600" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>那为什么又要有域名，又要有 IP 呢？</p><h2 id="域名、ip-共存" tabindex="-1"><a class="header-anchor" href="#域名、ip-共存" aria-hidden="true">#</a> 域名、IP 共存</h2><p>首先还是解释一下，为什么会出现现在这种域名、IP 地址共存的情况。主要有两个点：</p><ol><li><strong>提升用户体验</strong></li><li><strong>提高运行效率</strong></li></ol><p>分别解释一下，IP 地址长度为 32 位，平时用十进制来表示的话，就长这样——<code>192.168.1.0</code> ，但是想象一下，如果我们要访问某个网站需要让我们输入这么一长串数字，体验肯定相当差，首先记忆这么长串数字对很多人来说就很痛苦，更何况我们常用的网站肯定不止一个。</p><p>除此之外，如果你给其他人推广你的网站，你吧啦吧啦说了一大堆，然后来个「如果你感兴趣，请访问我们的网站 192.168.1.0」，然后就没有然后了。</p><p>这也是为啥现在仍然在使用域名，方便人脑去记忆。</p><p>那为啥还需要 IP 地址呢？因为 IPv4 中的 IP 地址只需要 <strong>4 个字节</strong>，而用字符串表示的域名最少也需要几十个字节，长的甚至达到几百字节，而这会大大的增加底层路由器的负担。</p><p>这也是为啥 IP 地址仍然在被使用。人来使用域名，而路由器层则使用 IP 地址，就跟我们书写的是我们能认识的字符，而最终计算机认识的是一堆二进制一样。</p><h2 id="dns-解析" tabindex="-1"><a class="header-anchor" href="#dns-解析" aria-hidden="true">#</a> DNS 解析</h2><p>知道了这个背景之后，我们就可以来看看「域名」是如果变成「IP 地址」的。</p><p>首先我们知道，会往 DNS 服务器发送请求，那问题就来了，浏览器怎么知道 DNS 服务器的地址是啥？</p><figure><img src="'+d+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>答案是<strong>提前配置好的</strong>。当然这不是唯一的方式，DNS 也有可能通过 DHCP（<strong>D</strong>ynamic <strong>H</strong>ost <strong>C</strong>onfiguration <strong>P</strong>rotocol） 动态分配的。</p><p>例如，MacOS 中的 DNS 配置就长下面这样。</p><figure><img src="'+s+'" alt="" width="600" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>当然，你也可以通过命令行来查看、修改，地址在 <code>/etc/resolv.conf</code> 。</p><p>有了 DNS 服务器，那么你可能会觉得，接下来的事情就很简单了：</p><figure><img src="'+l+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>我给你传个域名，你返给我对应的 IP 地址即可。那问题来了，现在互联网中有数万台的 DNS 服务器，我怎么知道数据在哪台服务器上？难道要一台一台的遍历请求这数万台服务器吗？</p><p>我相信你肯定没有感知到在浏览器中输入域名到页面展示会花费那么久，这也说明肯定不是一台一台服务器进行遍历的。</p><h2 id="域名的组成" tabindex="-1"><a class="header-anchor" href="#域名的组成" aria-hidden="true">#</a> 域名的组成</h2><p>要了解 DNS 是如何对其进行优化的，我们需要先知道域名的组成部分。看到这，很可能你会这么想：</p><blockquote><p>啥组成？不就是一堆字符串吗？</p></blockquote><p>实际上，域名是有由不同的<strong>域</strong>组成的，每个 <code>.</code> 隔开的部分就是一个<strong>域</strong>。</p><p>这里举个例子，假设我们分析的域名为 <code>www.google.com</code> ，从我们平时写快递的收货地址的惯性思维来看，这个域的各个部分大小可能是这样的：</p><blockquote><p>www &gt; google &gt; com</p></blockquote><p>但是实际上并不是这样，而是：</p><blockquote><p>. &gt; com &gt; google &gt; www</p></blockquote><p>你甚至发现，最大的还是个 <code>.</code> 。其实完整的域名应该是 <code>www.google.com. </code>，<code>.</code> 代表<strong>根域</strong>，因为根域对于所有的域名来说，意义都一样，所以平时我们都把最后的点给省略了。</p><p>每个域都有自己的专属名词：</p><blockquote><p>. &gt; com &gt; google &gt; www</p><p>根域 ｜ 一级级域｜二级域名｜（子域名）｜主机名</p></blockquote><p>当然，我们知道还可以针对二级域名再划分子域名，类似于 <code>mail.google.com</code>。</p><p>所以看到这，你应该能够理解<strong>域名是由层次的</strong>这个概念了，我再举个比较的通俗的例子。</p>',35),P={href:"https://mail.google.com/mail/u/0/#inbox",target:"_blank",rel:"noopener noreferrer"},k=c('<h2 id="dns-的分层" tabindex="-1"><a class="header-anchor" href="#dns-的分层" aria-hidden="true">#</a> DNS 的分层</h2><p>了解完域名的分层之后，DNS 是如何优化<strong>域名解析</strong>的问题就迎刃而解了，那就是——分层。</p><p>DNS 服务器会将域名的数据<strong>分布式</strong>的存储在各个 DNS 服务器上，但是同一个域的数据，会存储在同一台 DNS 服务器上，同一台 DNS 服务器可以存储多个域的数据。</p><p>这么说可能会有些抽象，一图胜千言，其实就是这样：</p><figure><img src="'+h+'" alt="" width="600" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>有了对数据的分层，那么查询数据就会很有<strong>节奏感</strong>。</p><h2 id="查询域名数据" tabindex="-1"><a class="header-anchor" href="#查询域名数据" aria-hidden="true">#</a> 查询域名数据</h2><p>一图胜千言，有了分层的机制，整个的查询过程就会长这样：</p><figure><img src="'+m+'" alt="DNS_分层查询" tabindex="0" loading="lazy"><figcaption>DNS_分层查询</figcaption></figure><p>首先会去配置的 DNS 服务器中查询，这个其实一般都是本地或者内网中的 DNS 服务器。如果没有找到，就会去问<strong>根域</strong>要，说哥们，我这里需要 <code>www.google.com</code> 的 IP 地址。</p><p>根域一看，我这里没有啊，但是我知道 <code>com</code> 域的 DNS 服务器地址，他可能知道。</p><p>然后 <code>com</code> 域的 DNS 服务器一看，<code>www.google.com</code> 的 IP 地址我也不知道，但是我知道 <code>google.com</code> 域的 DNS 服务器的地址，他可能知道，你再去问问他。</p><p>就这样一路问下去，最终就能够找到 <code>www.google.com</code> 所对应的 IP 地址了。</p><h2 id="根域名服务器" tabindex="-1"><a class="header-anchor" href="#根域名服务器" aria-hidden="true">#</a> 根域名服务器</h2><p>看了上面的流程，可能你还是会有点疑问。因为去找 DNS 服务器查询 IP 地址时，初始的 DNS 的服务器的 IP 地址是走的本地计算机的配置的。那在分层查询时，我怎么知道有哪些<strong>根服务器</strong>？以及我怎么知道这些根服务器的 IP 地址是啥？</p><p><strong>答案是内置</strong>。</p><p>我们的设备，或者说所有能上网的设备都会内置根服务器的列表。总共有 13 台根 DNS 服务器，分别是<code>[a-m].root-servers.net</code> ，这些根服务器的地址根本不需要查询就能直接获取。</p><p>当然，稍微想想也知道，13 台服务器是很难扛住全球互联网用户的请求的，实际上对于这 13 台服务器有很多的<strong>镜像服务器</strong>。</p><h2 id="眼见为实" tabindex="-1"><a class="header-anchor" href="#眼见为实" aria-hidden="true">#</a> 眼见为实</h2><p>说了这么多虚的概念，接下来我们通过 <code>dig</code> 命令来实际操作一下。</p><figure><img src="'+f+'" alt="" width="650" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>可以看到，在 <code>QUESTION SECTION</code> 下的完整域名是 <code>www.google.com.</code> 是带了<strong>根域</strong>的，那后面的这个 <code>IN</code> 和 <code>A</code> 又是啥意思呢？</p><p>这是因为，在向 DNS 服务器查询请求的时候，<strong>需要三个参数</strong>，分别是：</p>',23),y={href:"http://www.google.com",target:"_blank",rel:"noopener noreferrer"},q=o("li",null,[e("网络类型（Class 设计之初，考虑到了多种网络并存的场景，但是目前实际上只有一种网络——互联网，所以该参数的值一直都会为 —— "),o("code",null,"IN"),e(" ）")],-1),j=o("li",null,[e("类型（例如 "),o("code",null,"A"),e(" 表示 IP 地址，而 "),o("code",null,"MX"),e(" 则表示邮件服务器的地址）")],-1),z=c('<p>而在 <code>ANSWER SECTION</code> 中，则是 DNS 服务的响应结果，上图中显示了总有 <code>6</code> 条 DNS 记录，并且在后面返回了其对应的 IP 地址。</p><p>而其中的 <code>69</code> 则是 TTL，单位是秒，代表了在 69 之内都不用再次发送请求了。</p><p>最下面则是统计的信息，本次 DNS 查询所话费的时间，以及请求的 DNS 服务器的地址和端口。这个服务器地址是我们本机配置的 DNS 服务器的地址。</p><p>眼尖的可能发现了，上图中根本没有设计到对<strong>根服务器</strong>的请求。这是因为这个命令把这部分给<strong>省略掉了</strong>，我们可能通过加上 <code>+trace</code> 命令行参数来查看详细的<strong>分级查询过程</strong>。</p><p>这次我们以 <code>www.36kr.com</code> 来作为例子。</p><figure><img src="'+_+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>可以看到，上图中列出了所有的根域名服务器，然后去找 <code>com</code> 域要，然后再找 <code>36kr.com</code> 域去要，最终是拿到了 <code>www.36kr.com</code> 的 IP 地址。</p><h2 id="缓存机制" tabindex="-1"><a class="header-anchor" href="#缓存机制" aria-hidden="true">#</a> 缓存机制</h2><p>当然，如果每次都从根服务器开始往下找，明显是不合理的，因为域名和 IP 地址的对应关系本来变动的就不频繁，所以 DNS 服务器是都会将结果缓存的。</p><p>并且，在下图中：</p><figure><img src="'+u+'" alt="" width="600" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>我只写了一个 DNS 服务器中有同级别的域信息，但是实际上<strong>不同层级的域信息可能存在于同一个 DNS 服务器</strong>，举个例子，<code>com</code> 域和 <code>google.com</code> 域可能在同一台机器上。</p><p>但是，这个缓存是有有效期的。如果在这个有效期内 DNS 数据发生了变化，那么缓存中的数据就会不正确，此时需要手动的将 DNS 删除。</p>',13);function E(v,C){const t=i("ExternalLinkIcon");return a(),g("div",null,[N,S,D,o("p",null,[e("域名就类似于 "),o("a",b,[e("www.google.com"),n(t)]),e("，而通过 "),I,e(" 命令，就可以查询到对应域名的 IP 地址了。")]),x,o("blockquote",null,[o("p",null,[e("com 公司的 google 部门的 www。"),o("a",P,[e("https://mail.google.com/mail/u/0/#inbox"),n(t)])])]),k,o("ol",null,[o("li",null,[e("域名（例如 "),o("a",y,[e("www.google.com"),n(t)]),e(")")]),q,j]),z])}const O=r(w,[["render",E],["__file","230830.html.vue"]]);export{O as default};
